<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Docker 学习</title>
    <url>/2021/03/28/docker-xue-xi/</url>
    <content><![CDATA[<p>有人说，Docker 的出现就像集装箱一样，所谓的穿着马甲的“标准化”</p>
<p>想要搞懂 Docker，需要明白它的两句口号</p>
<p>1.<strong>Build, Ship and Run</strong>，搭建、发送、运行三板斧</p>
<p>2.<strong>Build once，Run anywhere</strong>，只要搭建一次，什么情况下都能够使用</p>
<p>Docker 技术的核心概念分别是</p>
<blockquote>
<p>镜像（Image）别人存放好文档的地方</p>
<p>容器（Container）实现具体操作程序的地方</p>
<p>仓库（Repository） 自己本地下载别人的镜像</p>
</blockquote>
<p>就以运维中举例，我们可能会看到多种语言写出来的各种各样的东西，并且可能还有历史遗留的不同版本导致的错误</p>
<p>这个时候，标准化管理显得尤其重要，这个时候就需要一个统一的操作方法。就算你只用 php 写程序，php 的版本不同，加上 SQL 的不同，使用容器的不同，nginx 或者 apache，甚至有不知名的 web 容器，还有自己写的 web 容器</p>
<br>

<h3 id="Docker-运行-HelloWorld"><a href="#Docker-运行-HelloWorld" class="headerlink" title="Docker 运行 HelloWorld"></a>Docker 运行 HelloWorld</h3><br>

<p>Docker指令的运行需要管理员root身份</p>
<p>Docker 允许你在容器内运行应用程序， 使用 <strong>docker run</strong> 命令来在容器内运行一个应用程序</p>
<br>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">runoob@runoob:~$ docker run ubuntu:15.10 /bin/echo <span class="token string">"Hello world"</span>
Hello world

<span class="token comment"># 存在镜像之后，就不需要指定版本了</span>
runoob@runoob:~$ docker run ubuntu /bin/echo <span class="token string">"Hello world"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<br>

<blockquote>
<p>docker： Docker 的二进制执行文件</p>
<p>run： 与前面的 Docker 组合来运行一个容器</p>
<p>ubuntu：15.10 指定要运行的镜像，Docker 首先从本地主机上查找镜像是否存在，如果不存在，Docker 就会从镜像仓库 Docker Hub 下载公共镜像</p>
<p>/bin/echo “Hello world”: 在启动的容器里执行的命令</p>
</blockquote>
<p>不过现在的 Docker 已经实现了可视化操作，可以直接通过可视化仓库直接拉取镜像了</p>
<p>可以直接在仓库中调用想用的镜像并且使用（以下的操作稍微看看了解以下就行）</p>
<br>

<h4 id="进行交互式的容器"><a href="#进行交互式的容器" class="headerlink" title="进行交互式的容器"></a>进行交互式的容器</h4><br>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">runoob@runoob:~$ docker run -i -t ubuntu:15.10 /bin/bash
root@0123ce188bd8:/<span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<br>

<blockquote>
<p>-t：在新容器内指定一个伪终端或终端</p>
<p>-i：允许你对容器内的标准输入 (STDIN) 进行交互</p>
</blockquote>
<p>此时我们已经进入了 ubuntu:15.10 系统的容器中，可以通过查询版本的指令来查看</p>
<br>

<h4 id="启动容器（后台）"><a href="#启动容器（后台）" class="headerlink" title="启动容器（后台）"></a>启动容器（后台）</h4><br>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">runoob@runoob:~$ docker run -d ubuntu:15.10 /bin/sh -c <span class="token string">"while true; do echo hello world; sleep 1; done"</span>
2b1b7a428627c51ab8810d541d759f072b4fc75487eed05812646b8534a2fe63<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<br>

<p>这是容器在后台运行，这时我们可以通过 docker ps 来查询容器的运行情况</p>
<p>后台运行的容器都会有一个独一无二的id，在下面的操作都是使用这个id进行的</p>
<br>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">runoob@runoob:~$ docker logs 2b1b7a428627 <span class="token comment">#查看容器内的标准输入输出</span>
runoob@runoob:~$ docker stops 2b1b7a428627 <span class="token comment">#暂停容器的运行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<br>

<h3 id="Docker-容器的使用"><a href="#Docker-容器的使用" class="headerlink" title="Docker 容器的使用"></a>Docker 容器的使用</h3><br>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">runoob@runoob:~<span class="token comment"># docker</span>
<span class="token comment"># 可以使用这个指令，查看所有的docker指令</span>
runoob@runoob:~<span class="token comment"># docker command --help</span>
<span class="token comment"># 查询特定指令的提示</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<br>

<p>虽然是纯英文的，但是用来训练六级水平也不错（bushi</p>
<p>咳咳，这是可以让你快速查询这些命令的意思，毕竟没有人一上来就能熟练掌握这些东西</p>
<p>虽然我们中国的学习主要还是面向 CSDN 和 B 站这种平台进行学习，主要的问题还是技术实在不断更新的，更多的特性需要去读官方的文档。所以我们应该感谢那些为了中文文档付出的 contributor，但是这种基本的东西，通过各种博客进行学习基本能掌握</p>
<br>

<h4 id="拉取镜像，启动容器"><a href="#拉取镜像，启动容器" class="headerlink" title="拉取镜像，启动容器"></a>拉取镜像，启动容器</h4><br>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ docker pull ubuntu <span class="token comment"># 拉取ubuntu镜像</span>
$ docker run -it ubuntu /bin/bash <span class="token comment"># 启动交互式容器 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<br>

<p>在进入交互式容器的时候，也会显示其独一无二的 id，在退出时，这个容器也会对应关闭</p>
<p>这是可以使用 Docker statrt 指令来在幕后运行的</p>
<p>当然，你也可以加入 -d 来使对应的 Docker 容器在后台操作</p>
<br>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@VM-0-3-ubuntu:/<span class="token comment"># docker start f994a769ac63</span>

<span class="token comment"># 可以随时停止并重启容器</span>
$ docker stop <span class="token operator">&lt;</span>容器 ID<span class="token operator">&gt;</span>
$ docker restart <span class="token operator">&lt;</span>容器 ID<span class="token operator">&gt;</span>

$ docker attach 1e560fca3906 <span class="token comment"># 在容器进入后台之后，可以使用这个指令进入容器</span>
$ docker <span class="token builtin class-name">exec</span> -it 243c32535da7 /bin/bash <span class="token comment">#这个方式也可以进入容器</span>
<span class="token comment"># 两者区别就是，前者退出时会停止容器，后者则不会，具体可以通过help来查询</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<br>

<h4 id="导入导出容器"><a href="#导入导出容器" class="headerlink" title="导入导出容器"></a>导入导出容器</h4><br>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ docker <span class="token builtin class-name">export</span> 1e560fca3906 <span class="token operator">&gt;</span> ubuntu.tar <span class="token comment"># 导出本地容器</span>
$ <span class="token function">cat</span> docker/ubuntu.tar <span class="token operator">|</span> docker <span class="token function">import</span> - test/ubuntu:v1 <span class="token comment"># 将快照文件导入到镜像test/unbuntu:v1中</span>
$ docker <span class="token function">import</span> http://example.com/exampleimage.tgz example/imagerepo <span class="token comment"># 导出入到URL也未尝不可</span>

$ docker <span class="token function">rm</span> -f 1e560fca3906 <span class="token comment"># 删除终止的容器 -f输出容器内部的标准输出</span>
$ docker container prune <span class="token comment"># 清除所有终止状态的容器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<br>

<p>这些指令在 Windows 中的 Docker 已经实现了统一的可视化管理，这里了解一下就好</p>
<p>当然，如果是在 Linux 服务上运行这些指令是非常有必要的</p>
<br>

<h4 id="web-应用"><a href="#web-应用" class="headerlink" title="web 应用"></a>web 应用</h4><br>

<p>个人对 Docker 可视化管理有几个观点：</p>
<ol>
<li>确实方便了很多操作，但是仔细想想，很多东西会在我们的鼠标点击中消失</li>
<li>Docker 自带的终端是不能实现各种方法的，Windows 的终端是可以使用右键进行自动粘贴的，Xshell 也支持右键生成菜单栏的功能，但是 Docker 就什么都没有，以至于复制代码这样的简单功能都无法实现。所以在接下来的操作中，我依然会使用 Windows 自带的终端进行 Docker 操作</li>
</ol>
<br>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">runoob@runoob:~<span class="token comment"># docker run -d -P training/webapp python app.py # -P将容器中的网络端口随机映射我们的主机上，即对应的服务器ip</span>
runoob@runoob:~$ docker run -d -p <span class="token number">5000</span>:5000 training/webapp python app.py <span class="token comment"># 也可以设置不同的端口参数</span>

runoob@runoob:~$ docker port <span class="token punctuation">{</span>containerid<span class="token punctuation">}</span> <span class="token comment"># 查看容器端口的映射情况</span>
runoob@runoob:~$ docker <span class="token function">top</span> wizardly_chandrasekhar <span class="token comment"># 使用 docker top 查看内部运行情况</span>
runoob@runoob:~$ docker inspect wizardly_chandrasekhar <span class="token comment"># 使用inspect查看底层信息</span>
<span class="token comment"># 这个会返回记录容器配置和状态的json信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<br>

<h3 id="Docker-镜像的使用"><a href="#Docker-镜像的使用" class="headerlink" title="Docker 镜像的使用"></a>Docker 镜像的使用</h3><br>

<p>我们可以使用 <strong>docker images</strong> 来列出本地主机上的镜像（在 Docker 已经实现可视化）</p>
<p>在可视化中的容器管理中，我们还可以查看整个容器使用的日志情况，可以说，是一套已经非常完善的可视化管理了</p>
<p>使用 <code>docker search httpd</code> 来查找对应的镜像</p>
<p>镜像删除使用 <strong>docker rmi</strong> 命令，在可视化管理中，我们已经可以一键删除未使用的镜像了</p>
<p>在运行的容器内使用 <strong>apt-get update</strong> 命令进行更新</p>
<p>我们可以使用 docker tag 命令，为镜像添加一个新的标签。这样，在 docker images 之后我们就能看到多了一个 tag 标签</p>
<br>

<h3 id="Docker-容器连接"><a href="#Docker-容器连接" class="headerlink" title="Docker 容器连接"></a>Docker 容器连接</h3><br>

<h4 id="网络端口映射"><a href="#网络端口映射" class="headerlink" title="网络端口映射"></a>网络端口映射</h4><br>

<p>在运行容器的过程中，我们需要对其绑定一个端口（Redis 的 Docker 操作就必需要这个步骤）</p>
<ul>
<li><strong>-P :**是容器内部端口</strong>随机**映射到主机的高端口</li>
<li><strong>-p :</strong> 是容器内部端口绑定到<strong>指定</strong>的主机端口</li>
</ul>
<p>在绑定端口之前，还可以指定需要映射的地址，比如主机的 127.0.0.1</p>
<p><strong>docker port</strong> 命令可以让我们快捷地查看端口的绑定情况</p>
<p>（绑定的端口默认都是 TCP，可以在后面使用 /UDP 绑定为 UDP ）</p>
<br>

<h4 id="Docker-容器互联"><a href="#Docker-容器互联" class="headerlink" title="Docker 容器互联"></a>Docker 容器互联</h4><br>

<p>当我们创建一个容器的时候，docker 会自动对它进行命名。另外，我们也可以使用 <strong>–name</strong> 标识来命名容器</p>
<p>想要容器互联，首先需要新建一个 Docker 网络 <code>docker network create -d bridge test-net</code></p>
<p><strong>-d</strong>：参数指定 Docker 网络类型，有 bridge、overlay</p>
<p>之后将需要互联的容器添加到新建的 test-net 网络</p>
<br>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ docker run -itd --name test1 --network test-net ubuntu /bin/bash
$ docker run -itd --name test2 --network test-net ubuntu /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<br>

<h3 id="Docker-和虚拟机的区别"><a href="#Docker-和虚拟机的区别" class="headerlink" title="Docker 和虚拟机的区别"></a>Docker 和虚拟机的区别</h3><br>

<p>首先明确一点，Docker 并不是虚拟机，Docker 相较于虚拟机，删改了很多东西</p>
<br>

<p><img src="https://pica.zhimg.com/80/v2-ee27d299f5e38ed460218ac087518bba_720w.jpg?source=1940ef5c" alt="img"></p>
<br>

<p><strong>基础设施(Infrastructure)**：它可以是你的</strong>个人电脑<strong>，数据中心的</strong>服务器<strong>，或者是</strong>云主机**</p>
<p><strong>虚拟机管理系统(Hypervisor)**：利用 Hypervisor，可以在</strong>主操作系统<strong>之上运行多个不同的</strong>从操作系统<strong>。类型1的 Hypervisor 有支持 MacOS 的 **HyperKit</strong>，支持 Windows 的 <strong>Hyper-V、Xen</strong> 以及 <strong>KVM</strong>。类型2的 Hypervisor 有 VirtualBox 和 VMWare workstation（利用Hypervisor虚拟化CPU、内存、IO等设备）</p>
<p><strong>客户机操作系统(Guest Operating System)**：假设你需要运行3个相互隔离的应用，则需要使用Hypervisor启动3个</strong>客户机操作系统<strong>，也就是3个</strong>虚拟机**这些虚拟机都非常大，也许有700MB，这就意味着它们将占用2.1GB的磁盘空间。更糟糕的是，它们还会消耗很多CPU和内存</p>
<p><strong>各种依赖</strong>：每一个<strong>客户机操作系统</strong>都需要安装许多依赖。如果你的应用需要连接 PostgreSQL 的话，则需要安装 <strong>libpq-dev</strong>；如果你使用 Ruby 的话，应该需要安装 gems；如果使用其他编程语言，比如 Python 或者 Node.js，都会需要安装对应的依赖库</p>
<p><strong>应用(application)**：安装依赖之后，就可以在各个</strong>客户机操作系统**分别运行应用了，这样各个应用就是相互隔离的</p>
<br>

<p><img src="https://pic3.zhimg.com/80/v2-0d67e01d75d19e227fb44104eca28f43_720w.jpg?source=1940ef5c" alt="img"></p>
<br>

<p>**主操作系统(Host Operating System)**：所有主流的 Linux 发行版都可以运行 Docker。对于 MacOS 和 Windows，也有一些办法”运行”Docker。</p>
<p>**Docker守护进程(Docker Daemon)**：Docker 守护进程取代了Hypervisor，它是运行在操作系统之上的后台进程，负责管理Docker容器。Docker 抛弃了臃肿的虚拟机管理系统，也正是如此，他失去了很多虚拟机的功能</p>
<p><strong>各种依赖</strong>：对于Docker，应用的所有依赖都打包在 <strong>Docker 镜像</strong>中，<strong>Docker 容器</strong>是基于 <strong>Docker 镜像</strong>创建的</p>
<p><strong>应用(application)**：应用的源代码与它的依赖都打包在 **Docker 镜像</strong>中，不同的应用需要不同的 <strong>Docker 镜像</strong>。不同的应用运行在不同的 <strong>Docker 容器</strong>中，它们是相互隔离的</p>
<p>大家也没有必要完全否定<strong>虚拟机</strong>技术，因为两者有不同的使用场景。<strong>虚拟机</strong>更擅长于彻底隔离整个运行环境。例如，云服务提供商通常采用虚拟机技术隔离不同的用户。而 <strong>Docker</strong> 通常用于隔离不同的应用，例如<strong>前端</strong>，<strong>后端</strong>以及<strong>数据库</strong></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>ATSAST 项目学习（Spring）</title>
    <url>/2021/07/12/java-spring/</url>
    <content><![CDATA[<h3 id="Maven-项目"><a href="#Maven-项目" class="headerlink" title="Maven 项目"></a>Maven 项目</h3><p>在maven创建时候的测试名就是GroupId就是运行的主类</p>
<p>所有的目录结构都是约定好的标准结构，我们千万不要随意修改目录结构</p>
<p>我们再来看最关键的一个项目描述文件<code>pom.xml</code></p>
<p>其中，<code>groupId</code>类似于Java的包名，通常是公司或组织名称，<code>artifactId</code>类似于Java的类名，通常是项目名称，再加上<code>version</code>，一个Maven工程就是由<code>groupId</code>，<code>artifactId</code>和<code>version</code>作为唯一标识。我们在引用其他第三方库的时候，也是通过这3个变量确定。例如，依赖<code>commons-logging</code></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>commons<span class="token operator">-</span>logging<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>commons<span class="token operator">-</span>logging<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">1.2</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>Maven解决了依赖管理问题。例如，我们的项目依赖<code>abc</code>这个jar包，而<code>abc</code>又依赖<code>xyz</code>这个jar包</p>
<p>当我们声明了<code>abc</code>的依赖时，Maven自动把<code>abc</code>和<code>xyz</code>都加入了我们的项目依赖，不需要我们自己去研究<code>abc</code>是否需要依赖<code>xyz</code></p>
<p>┌──────────────┐<br>│Sample Project        │<br>└──────────────┘<br>        │<br>        ▼<br>┌──────────────┐<br>│     abc                   │<br>└──────────────┘<br>        │<br>        ▼<br>┌──────────────┐<br>│     xyz                   │<br>└──────────────┘</p>
<p>Maven定义了几种依赖关系，分别是<code>compile</code>、<code>test</code>、<code>runtime</code>和<code>provided</code>：</p>
<table>
<thead>
<tr>
<th align="left">scope</th>
<th align="left">说明</th>
<th align="left">示例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">compile</td>
<td align="left">编译时需要用到该jar包（默认）</td>
<td align="left">commons-logging</td>
</tr>
<tr>
<td align="left">test</td>
<td align="left">编译Test时需要用到该jar包</td>
<td align="left">junit</td>
</tr>
<tr>
<td align="left">runtime</td>
<td align="left">编译时不需要，但运行时需要用到</td>
<td align="left">mysql</td>
</tr>
<tr>
<td align="left">provided</td>
<td align="left">编译时需要用到，但运行时由JDK或某个服务器提供</td>
<td align="left">servlet-api</td>
</tr>
</tbody></table>
<p>其中，默认的<code>compile</code>是最常用的，Maven会把这种类型的依赖直接放入classpath。</p>
<p><code>test</code>依赖表示仅在测试时使用，正常运行时并不需要。最常用的<code>test</code>依赖就是JUnit：</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.junit.jupiter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit-jupiter-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>runtime</code>依赖表示编译时不需要，但运行时需要。最典型的<code>runtime</code>依赖是JDBC驱动，例如MySQL驱动：</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.1.48<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>provided</code>依赖表示编译时需要，但运行时不需要。最典型的<code>provided</code>依赖是Servlet API，编译的时候需要，但是运行时，Servlet服务器内置了相关的jar，所以运行期不需要：</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="Maven镜像"><a href="#Maven镜像" class="headerlink" title="Maven镜像"></a>Maven镜像</h4><p>除了可以从Maven的中央仓库下载外，还可以从Maven的镜像仓库下载。如果访问Maven的中央仓库非常慢，我们可以选择一个速度较快的Maven的镜像仓库。Maven镜像仓库定期从中央仓库同步：</p>
<p>​           slow                  ┌───────────────────┐<br>​    ┌─────────────&gt;│          Maven Central Repo.│<br>​    │                             └───────────────────┘<br>​    │                        │<br>​    │                        │sync<br>​    │                        ▼<br>┌───────┐  fast             ┌───────────────────┐<br>│ User       │─────────&gt;│         Maven Mirror Repo. │<br>└───────┘                    └───────────────────┘</p>
<p>中国区用户可以使用阿里云提供的Maven镜像仓库。使用Maven镜像仓库需要一个配置，在用户主目录下进入<code>.m2</code>目录，创建一个<code>settings.xml</code>配置文件，内容如下：</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrors</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">&gt;</span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">&gt;</span></span>
            <span class="token comment">&lt;!-- 国内推荐阿里云的Maven镜像 --&gt;</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>https://maven.aliyun.com/repository/central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrors</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>配置镜像仓库后，Maven的下载速度就会非常快</p>
<h4 id="Maven-指令"><a href="#Maven-指令" class="headerlink" title="Maven 指令"></a>Maven 指令</h4><p><code>mvn clean</code>：清理所有生成的class和jar</p>
<p><code>mvn clean compile</code>：先清理，再执行到<code>compile</code></p>
<p><code>mvn clean test</code>：先清理，再执行到<code>test</code>，因为执行<code>test</code>前必须执行<code>compile</code>，所以这里不必指定<code>compile</code></p>
<p><code>mvn clean package</code>：先清理，再执行到<code>package</code></p>
<p>这些指令了解就好，在 idea 中已经实现可视化</p>
<h3 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring-Boot"></a>Spring-Boot</h3><p>Spring 是一个开源的轻量级框架，目的是为了简化企业级应用程序开发。Spring 框架除了帮我们管理对象及其依赖关系，还提供像通用日志记录、性能统计、安全控制、异常处理等面向切面的能力，还能帮我管理最头疼的数据库事务，本身提供了一套简单的 JDBC 访问实现，提供与第三方数据访问框架集成（如 Hibernate、JPA），与各种 Java EE 技术整合（如Java Mail、任务调度等等），提供一套自己的 web 层框架 Spring MVC、而且还能非常简单的与第三方 web 框架集成</p>
<p>Spring 让我们不再需要自己通过工厂和生成器来创建及管理对象之间的依赖关系。但是 Spring 的弊端也很快就暴露出来了，虽然 Spring 已经帮我进行了依赖的管理，但我们有时候需要写一堆依赖配置文件。因为我们一旦需要什么功能，我们就需要去添加这个功能所包含的依赖。这个时候，Spring-Boot 出现就完美解决了这个问题</p>
<p>Spring-Boot 是基于 Spring 优化而诞生出的一个框架。Spring-Boot 解决了 Spring 所需依赖过多的问题，该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。在导入外部依赖包的时候，一个包就整合了多个依赖，在初始化的时候 idea 也提供了可视化的方式直接添加所需要的 jar 包（Spring-Boot 已经整合了像是 tomcat 这类的 web 启动）</p>
<h4 id="Spring-Boot-中的包"><a href="#Spring-Boot-中的包" class="headerlink" title="Spring-Boot 中的包"></a>Spring-Boot 中的包</h4><p>Spring-Boot 中有几个常见的包的写法，分别对应不同的功能，这些并非 Spring-Boot 中规定，只是一种不成文的规定。（大家都这么写了之后，你也就会模仿这个模式写框架了）</p>
<p>model 层：<br>model 层即数据库实体层，也被称为 entity 层，pojo 层，domain 层。model 层主要是数据库中的字段在框架中的展示。Spring-Boot 在数据库操作中，会自动把这些和数据库进行匹配（同时自动转换大小写、驼峰命名和下划线命名）。一般数据库一张表对应一个实体类，类属性同表字段一一对应</p>
<p>mapper 层：<br>mapper 层即数据持久层，也被称为 dao 层。mapper 层的作用为访问数据库，向数据库发送 SQL 语句，完成数据的增删改查任务。通过在mapper 层的接口，和下面要说的 service 进行交互</p>
<p>service 层：<br>service 层即业务逻辑层。service 层的作用为完成功能设计，在整个 Spring-Boot 项目中，service 层实现绝大多数的逻辑，调用 mapper 层接口，接收 mapper 层返回的数据，完成项目的基本功能设计。一般都是写一个 service 接口，之后在 service 层中创建一个 impl 包，用于对 service 接口的实现的实体类</p>
<p>controller 层：<br>controller 层即控制层。controller 层的功能为请求和响应控制，是在后端实现跟前端交互的途径。controller 层负责接受前端请求，调用 service 层，接收 service 层返回的数据，最后返回具体的页面和数据到客户端（如果是一个人写 Java 全栈，那么 controller 层直接返回的地址，让前端知道自己跳转到哪里）</p>
<p>当然，这是最常使用的一批包，Spring-Boot 还包含其他配置，这个在下面会讲</p>
<h4 id="添加依赖-amp-更改配置"><a href="#添加依赖-amp-更改配置" class="headerlink" title="添加依赖&amp;更改配置"></a>添加依赖&amp;更改配置</h4><p>有些时候需要添加其他功能的时候，我们就需要添加依赖，这个十分简单，只需要在<a href="https://mvnrepository.com/">依赖仓库</a>查找需要的即可</p>
<p>idea 在更新之后会有个刷新的小图标，点击之后就可以自动从网站上导入你需要的依赖包</p>
<p>在创建好项目之后，在 resource 会有一个自带的配置文件 application.properties ，在这里可以更改 Spring-Boot 默认的配置（比如默认开启端口 8080）。这里更推荐使用 yml 的配置文件，因为 properties 是键值对的形式，而 yml 使用的是严格的缩进，写法上更加简单</p>
<h4 id="推荐依赖"><a href="#推荐依赖" class="headerlink" title="推荐依赖"></a>推荐依赖</h4><p>通过运行 Spring-Boot 中的 application.java 文件，你的程序就算是正式启动了。默认测试主界面为 localhost:8080</p>
<p>这个时候，如果你在用 Java 写前端页面，写过的人都知道，页面是需要不断调试的。但是 Spring-Boot 本身不能像 vscode 一样进行实时刷新页面进行不断调整，你必须重启主程序，这就导致效率非常低下。这个时候可以使用到 Spring web 最需要的依赖——热部署。通过添加 dev-tool 这个依赖，你就可以使用刷新进行实时调节了</p>
<p>还有一个是在写实体类中的简化操作的依赖——lombok。在使用实体类时，我们需要创建有参&amp;无参构造方法、Getter&amp;Setter，才能作为一个规范的实体类的写法。虽然我们 alt + insert 这样的快捷键，但是在 ATSAST 的实际开发中，有些表中有多达20个的字段，如果这样写，代码将会十分臃肿。</p>
<p>lombok 中则定义了几个十分好用的注释：</p>
<p><strong>@Data</strong>：注解在 <strong>类</strong> 上；提供类所有属性的 get 和 set 方法，此外还提供了equals、canEqual、hashCode、toString 方法 </p>
<p><strong>@AllArgsConstructor</strong>：注解在 <strong>类</strong> 上；为类提供一个全参的构造方法，加了这个注解后，类中不提供默认构造方法了</p>
<p><strong>@NoArgsConstructor</strong>：注解在 <strong>类</strong> 上；为类提供一个无参的构造方法</p>
<p>这样就可以省去几十行的代码，但是这样的插件也有弊端。就如知乎上某些人说的那样，这种通过插件取缔快捷键的方法可能对整个项目效率提升并不大，因为这样导致别人也需要安装这个插件。最后这个插件的耦合性就可能越来越大，到时候如果想要舍弃这个插件，所付出的代价和时间可能不会很小</p>
<h4 id="各个层细节问题"><a href="#各个层细节问题" class="headerlink" title="各个层细节问题"></a>各个层细节问题</h4><p>在这之前，需要了解 Spring-Boot 中的一个非常重要的注释。@Autowired 注释，它可以对类成员变量、方法及构造函数进行标注，完成自动装配的工作。 通过 @Autowired的使用来消除 set ，get方法</p>
<p>在 controller &amp; service 层中，我们需要使用这个注释来分别对 service &amp; mapper 层的对象进行自动装配</p>
<h5 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h5><p>在 controller 层中，我们需要使用 Spring-Boot 的注释标注自己是控制器。这里有两个注释，一个是 <code>@Controller</code> ，还有一个是 <code>@RestController</code>，下面我们说说这两者的区别</p>
<ol>
<li><p>一般来说 @RestController 用于前后端分离，@Controller 不用于前后端分离， 因为使用 @RestController 的话，导致配置的视图解析器 InternalResourceViewResolver不起作用，从而使 Controller 层的方法无法返回jsp页面（无法转发），返回的内容只能是 return 里的内容。那是不是用 @Controller 就不能返回到指定页面呢？当然不是，需要 @ResponseBody 结合使用，在需要的方法上加上即可</p>
</li>
<li><p>很多人说 @RestController 相当于 @ResponseBody ＋ @Controller 合在一起的作用，不可否认，但还是有一点小区别，@RestController 可以用实体接收，而 @ResponseBody ＋ @Controller 不能再用实体接收。如果去看源码就可以发现 @RestController 整合了很多其他的注释</p>
</li>
</ol>
<p>@ResponseBody 是让 controller 中的返回值自动打包成一个 json 字符串的形式</p>
<h5 id="mapper"><a href="#mapper" class="headerlink" title="mapper"></a>mapper</h5><p>在 mapper 层实现和数据库的交互，应该加上 @mapper 注释表名自己是 Spring-Boot 中的 mapper 组件。不过可以在 application 中加上 @MapperScan 将在运行主类时自动扫描指定位置的文件，这个时候就需要使用 @Repository 表明这个文件是 Spring-Boot 中的组件，这个在不同层的注释不一样</p>
<p>这样之后，就可以在 service 层使用 @Autowired 进行自动装配了</p>
<h5 id="service"><a href="#service" class="headerlink" title="service"></a>service</h5><p>service 在大部分的大型项目中，对应的实体类肯定不止一个，但是 ATSAST 算是练手的中小型项目，所以没有那没多的接口，在以后的功能性扩展中可能会发展得更加宏大。在实体类中，需要使用 @Service 表明这个文件在 Spring-Boot 中的组件身份</p>
<p>写完这个逻辑接口之后，就可以直接去 controller 层实现前后端交互</p>
<h3 id="扩展性细节"><a href="#扩展性细节" class="headerlink" title="扩展性细节"></a>扩展性细节</h3><p>在前端传值的过程中，可能会有多种形式，一般会有三种</p>
<ol>
<li>query 传值，这种一般传比较少的值，大部分情况都是向后端发送一个 get 请求，主要作用是查询或修改数据库中特定的值</li>
<li>json 传值，一般传一个字符串或者数组，一般使用场景是向后端发送一个 post 请求，储存数据库。Spring-Boot 内置了一个依赖 jackson，只要前端传得参数名称一致，就可以自动匹配。对于对象也可以自动装配，不过需要使用 @RequestBody。如果不同需要使用@RequestParam 指定对应前端的参数名称</li>
<li>地址传值，这种比较少，指前端直接在地址用 {} 包裹一个参数进行传参。这个时候，方法中需要使用 @PathVariable 进行前端地址中的变量的获取</li>
</ol>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring-Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>ATSAST 项目学习（MyBatis）</title>
    <url>/2021/08/06/java-xiang-mu-xue-xi-mybatis/</url>
    <content><![CDATA[<h3 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h3><p><img src="https://img-blog.csdn.net/20160307142645476" alt="MyBatis 的一个基本流程"></p>
<p>这就是一个从页面申请到数据库的一个基本流程</p>
<p>在学习 MyBatis 之前，我们先看看 Java 最开始使用的数据库交互方法——JDBC（Java DataBase Connection）。由于每个数据库的方法是不一样，所以就会非常的麻烦。但是 JDBC 使用适配器模式，将每个数据库都转成一个统一的方法进行管理。然而，JDBC 仍然不够方便，因为你需要写很多连接数据库、关闭数据库等等方法，进行数据库的交互。最致命的是，你的逻辑代码里会混有 SQL 语句，这不是我们想要看到的。所以，MyBatis 的出现让这一尴尬处境有很多缓和</p>
<p>MyBatis 连接数据库有两种：</p>
<ol>
<li>直接使用注释。在 mapper 的方法上添加特定方法进行操作，这样的操作有几个弊端。一是如果接口方法躲起来，在后续的管理方面并不是很好；二是这样写由于没有 xml 的错误提示，很容易写错，且不方便进行后续的修改；三是，如果需要写一些比较的操作，像是连表查询，注释就不能写复杂的 SQL 逻辑了</li>
<li>在 resource 文件中创建一个 mapper 文件，用来储存对应 mapper 的 xml 文件。这里需要在开头配置一段 MyBatis 的配置，可以直接在文档上进行复制。可以在 idea 中下载对应的插件，提供代码提示，并且对应字段会有高亮显示</li>
</ol>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>
    <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>
    <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>......<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!--namespace 中放着对应 mapper 文件--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="配置数据库连接"><a href="#配置数据库连接" class="headerlink" title="配置数据库连接"></a>配置数据库连接</h4><p>在这之前，我们需要在 Spring-Boot 中添加能连接数据库连接的依赖，然后在 yml 中进行配置</p>
<p>url 表示数据库的地址和具体配置，useUnicode 防止乱码问题 characterEncoding 数据库中使用的编码格式（大小写不敏感）serverTimezone 是对时区的设置，在高版本的 SQL 中，时区需要进行特殊的配置（<em>CST</em>可视为美国、澳大利亚、古巴或中国的标准时间）useSSL 在高版本的 SQL 中是需要设置的，如果不设置有时候会出现对应的报错</p>
<p>driver 表示数据库对应的驱动</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//pipe.sast.codes<span class="token punctuation">:</span>7336/atsast<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding=UTF-8&amp;serverTimezone=CST&amp;useSSL=false&amp;allowPublicKeyRetrieval=true</span>
    <span class="token key atrule">username</span><span class="token punctuation">:</span> atsast
    <span class="token key atrule">password</span><span class="token punctuation">:</span> sast_forever
    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="配置-MyBatis"><a href="#配置-MyBatis" class="headerlink" title="配置 MyBatis"></a>配置 MyBatis</h4><p>type-aliases-package：匹配实体类所在的文件夹</p>
<p>mapper-locations：指定 mapper 文件的 xml 所在地</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">mybatis</span><span class="token punctuation">:</span>
  <span class="token key atrule">type-aliases-package</span><span class="token punctuation">:</span> com.sast.atSast.model
  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mapper/<span class="token important">*.xml</span>
  <span class="token key atrule">configuration</span><span class="token punctuation">:</span>
    <span class="token key atrule">map-underscore-to-camel-case</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>之后在 idea 中的数据库一栏，进行数据库的连接就可以方便的管理和处理 SQL 语句了</p>
<p>当然，可以提前设置 idea 的数据库为 MySQL，这样在写 xml 文件的时候就会有代码提示了，最好也装一下 idea 中的自带的 MyBatis 辅助插件</p>
<h4 id="ORM-框架"><a href="#ORM-框架" class="headerlink" title="ORM 框架"></a>ORM 框架</h4><p>除了 ATSAST 使用的 MyBatis 框架之外，Spring-Boot 也支持使用 JPA。在介绍这部分之前，让我们先了解一下 ORM 框架的基础知识。对象-关系映射（Object-Relational Mapping，简称ORM，关系数据库是企业级应用环境中永久存放数据的主流数据存储系统。对象和关系数据是业务实体的两种表现形式，业务实体在内存中表现为对象，在数据库中表现为关系数据。内存中的对象之间存在关联和继承关系，而在数据库中，关系数据无法直接表达多对多关联和继承关系。因此，ORM 系统一般以中间件的形式存在，主要实现程序对象到关系数据库数据的映射。简单来说，就是将框架中的实体类映射到对应的数据库</p>
<p>当我们实现一个应用程序时（不使用O/R Mapping），我们可能会写特别多数据访问层的代码，从数据库保存、删除、读取对象信息，而这些代码都是重复的。使用 ORM 框架之后，可以大大减少这种重复代码，从而提高工作效率</p>
<h5 id="简单了解-JPA"><a href="#简单了解-JPA" class="headerlink" title="简单了解 JPA"></a>简单了解 JPA</h5><p>Spring Boot Jpa 是 Spring 基于 ORM 框架、Jpa 规范的基础上封装的一套 Jpa 应用框架，可使开发者用极简的代码即可实现对数据的访问和操作。它提供了包括增删改查等在内的常用功能，且易于扩展。学习并使用 Spring Data Jpa 可以极大提高开发效率，最终要的是 JPA 让程序员解脱了 mapper 的操作</p>
<p>在使用之前，我们需要让 mapper 接口继承 JpaRepository，之后这个 mapper 的对象就可以直接使用默认定义的方法了。最神奇的地方在于，JPA 可以通过在持久化层中的方法名称生成一些简单的 SQL（在 MyBatis 的 mapper xml 配置中，也会根据方法名称进行部分代码的自动补全，不过作用不大），JPA 会根据方法中和 SQL 中相似的关键字名称进行匹配</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testBaseQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
	<span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	userRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	userRepository<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token number">1l</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	userRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
	userRepository<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
	userRepository<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	userRepository<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token number">1l</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// ...</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="复杂-SQL-逻辑的实现"><a href="#复杂-SQL-逻辑的实现" class="headerlink" title="复杂 SQL 逻辑的实现"></a>复杂 SQL 逻辑的实现</h5><p>对于一些需要分页需求的接口中，JPA 自带的方法中，可以传入一个 Pageable 类的对象。<code>Pageable</code> 是 Spring 封装的分页实现类，使用的时候需要传入页数、每页条数和排序规则。可以通过传入页数，分页数目，排序三个参数进行对象的实例化，之后传入方法中</p>
<p>Spring Data 绝大部分的 SQL 都可以根据方法名定义的方式来实现，但是由于某些原因我们想使用自定义的 SQL 来查询，Spring Data 也是完美支持的。在 SQL 的查询方法上面使用 <code>@Query</code> 注解，如涉及到删除和修改在需要加上 <code>@Modifying</code> 。也可以根据需要添加 <code>@Transactional</code> 对事物的支持，查询超时的设置等（在传入参数时，通过 <code>?1</code> 表示第一个参数，其他位置的参数依次类推）</p>
<p>最关注的多表问题，主要解决方法又两个：</p>
<ol>
<li>利用 Hibernate 的级联查询来实现</li>
<li>创建一个结果集的接口来接收连表查询后的结果（主要还是使用这种方式）</li>
</ol>
<h3 id="MyBatis-Plus"><a href="#MyBatis-Plus" class="headerlink" title="MyBatis-Plus"></a>MyBatis-Plus</h3><p>MyBatis-Plus 并非 Spring-Boot 官方依赖，而是一群“同人”创建的“DLC”。也就是说，就算把依赖替换成 MyBatis-Plus，原来的写法依然是可以的，只不过多了一些更加简单的方法。在 JPA 框架中，程序员是可以直接使用它定义的默认方法的，在 MyBatis-Plus 中，也是满足了这个需求，并且很多事情都直接让框架自动执行。甚至有一个代码生成器可以自动生成需要的代码</p>
<h4 id="基本-CRUD"><a href="#基本-CRUD" class="headerlink" title="基本 CRUD"></a>基本 CRUD</h4><p>在 mapper 和 service 层中，直接调用对应的接口就可以直接使用内置的方法。在 mapper 层中，需要类调用 <code>BaseMapper</code> 接口，后面跟上对应的实体类的类型，之后在自动装配的 mapper 对象中，就可以直接调用 MyBatis-Plus 内置的各种方法了。接下来举几个查的方法，其他的类似，一些复杂的下面的条件构造器会说</p>
<blockquote>
<p>selectList：里面参数表示条件构造器，如果没有直接写 null，表示返回这个表格中所有的数据，返回值是一个 List 列表</p>
<p>selectByMap：构造一个 map 表示过滤的内容，可以简单代替条件构造器，不过不是很推荐</p>
<p>selectById：通过主键的值进行查询（一般的主键都设置为 id）</p>
<p>selectBatchIds：通过一个 id 的列表进行查询</p>
</blockquote>
<p>剩下来的很多方法都是类似的，但是主要是要注意在 update 中的一个方法</p>
<p>updateById 这里的参数是实体类，而不是 id 的值</p>
<h4 id="条件构造器"><a href="#条件构造器" class="headerlink" title="条件构造器"></a>条件构造器</h4><p>通常的 SQL 语句总是需要过滤语句像是 where 或者是 Like，在 MyBatis-Plus 中，我们使用条件构造器来代替这些</p>
<p>首选要实例化一个 <code>QueryWrapper</code> 的对象，然后可以调用里面的方法，通过定义方法的链式编程来代替 SQL 语句。当然，如果你对能实现的复杂逻辑的范围不满意，还可以直接在里面使用 xml 自定义使用的方法</p>
<h4 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h4><p>当要更新一条记录的时候，希望这条记录没有被别人更新</p>
<p>乐观锁总体上实现了防止多个线程同时更改一个数据的情况，在一个线程修改完之后，另一个线程检查到乐观锁时，如果数据不同，会报错并取消更改（就好像一开始的 version 是1，更改之后会默认 +1）</p>
<p>实现乐观锁的前提，需要现在字段上添加 <code>@Version</code> 注释，再添加文档中需要的配置文件</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.sast.atsast.mapper"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBatis_PlusConfig</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">MybatisPlusInterceptor</span> <span class="token function">mybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">MybatisPlusInterceptor</span> mybatisPlusInterceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mybatisPlusInterceptor<span class="token punctuation">.</span><span class="token function">addInnerInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OptimisticLockerInnerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> mybatisPlusInterceptor<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>乐观锁实现方式：</p>
<blockquote>
<ul>
<li>取出记录时，获取当前version</li>
<li>更新时，带上这个version</li>
<li>执行更新时， set version = newVersion where version = oldVersion</li>
<li>如果version不对，就更新失败</li>
</ul>
</blockquote>
<h4 id="自动填入"><a href="#自动填入" class="headerlink" title="自动填入"></a>自动填入</h4><p>有些东西，我们希望数据库更新或者更改时能够自动添加某些数据（一般都是创建时间，或者是更新时间这种）</p>
<p>在配置好对应的 handler 文件之后，在需要使用自动填入的字段上加入一个 <code>@TableField</code> 的注释，如果在里面填入参数，可以使用 <code>fill = FieldFill.INSERT</code> 或者其他类推的，指定在特定命令时进行填入</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Component</span>
<span class="token comment">//不知道为什么官方文档的方法没有办法正常使用</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMetaObjectHandler</span> <span class="token keyword">implements</span> <span class="token class-name">MetaObjectHandler</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertFill</span><span class="token punctuation">(</span><span class="token class-name">MetaObject</span> metaObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"start insert fill ...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"createTime"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateFill</span><span class="token punctuation">(</span><span class="token class-name">MetaObject</span> metaObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"start update fill ...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"updateTime"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="逻辑删除"><a href="#逻辑删除" class="headerlink" title="逻辑删除"></a>逻辑删除</h4><p>逻辑删除说的通俗一点，就是我们所谓的假删，像是腾讯的消息记录，即使你撤回或者删除，在后台都是可以看到的（相当于只是放在“回收站中”，并没有真正的删除，像是原本的 git 命令删除也只是假删，需要使用 git gc 进行垃圾回收才能完全去除记录）</p>
<p>在项目中，通常也是有这种功能，一般都是设置一个 enable 字段，1表示显示，0表示删除。在 SQL 语句中，查找时加上 <code>where eable = 1</code> 显示未被假删的数据。在 MyBatis-Plus 中，这种事情可以自动的完成。在直接文档中的配置文件之后（可以根据要求自行定义），在相关的字段中添加注释 <code>@TableLogic</code> 就表示这是一个逻辑字段了。如果我设置0表示删除，1表示显示。使用内置的功能时，Spring-Boot 便只会返回 enable 为 1的字段（相当于自动调用了之前所说的命令）；同理，在执行删除方法时，其实是在内部执行了一个 update 语法，将 enable 从1改为0</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>
  <span class="token key atrule">global-config</span><span class="token punctuation">:</span>
    <span class="token key atrule">db-config</span><span class="token punctuation">:</span>
      <span class="token key atrule">logic-delete-field</span><span class="token punctuation">:</span> flag  <span class="token comment"># 全局逻辑删除的实体字段名(since 3.3.0,配置后可以忽略不配置步骤2)</span>
      <span class="token key atrule">logic-delete-value</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token comment"># 逻辑已删除值(默认为 1)</span>
      <span class="token key atrule">logic-not-delete-value</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token comment"># 逻辑未删除值(默认为 0)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring-Boot</tag>
        <tag>MyBatis-Plus</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Redis</title>
    <url>/2021/08/29/java-redis/</url>
    <content><![CDATA[<h3 id="什么是-Redis"><a href="#什么是-Redis" class="headerlink" title="什么是 Redis"></a>什么是 Redis</h3><p>我们使用 Redis 来实现 NoSQL （not only sql）</p>
<p>主要是作为一个中间件，在真实的服务中，有时像后端发送的信息量会很大，如果这期间还是使用数据库的话，读取速度会很慢。Redis 提供了一个缓存，这样写入和读取数据都要快上不少</p>
<blockquote>
<p>1.方便扩展（数据之间没有关系，很好扩展）</p>
<p>2.大数据高性能（Redis一秒写八万次，读取11万，NoSQL缓存记录级）</p>
<p>3.数据类型是多样的</p>
<p>4.传统 RDBMS 和 NoSQL</p>
</blockquote>
<p>Redis在windows中使用很简单，但是已经停更很久了。所以建议还是在Linux操作系统下使用</p>
<p>Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。 它支持多种类型的数据结构，如 <a href="http://www.redis.cn/topics/data-types-intro.html#strings">字符串（strings）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#hashes">散列（hashes）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#lists">列表（lists）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#sets">集合（sets）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#sorted-sets">有序集合（sorted sets）</a> 与范围查询， <a href="http://www.redis.cn/topics/data-types-intro.html#bitmaps">bitmaps</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#hyperloglogs">hyperloglogs</a> 和 <a href="http://www.redis.cn/commands/geoadd.html">地理空间（geospatial）</a> 索引半径查询。 Redis 内置了 <a href="http://www.redis.cn/topics/replication.html">复制（replication）</a>，<a href="http://www.redis.cn/commands/eval.html">LUA脚本（Lua scripting）</a>， <a href="http://www.redis.cn/topics/lru-cache.html">LRU驱动事件（LRU eviction）</a>，<a href="http://www.redis.cn/topics/transactions.html">事务（transactions）</a> 和不同级别的 <a href="http://www.redis.cn/topics/persistence.html">磁盘持久化（persistence）</a>， 并通过 <a href="http://www.redis.cn/topics/sentinel.html">Redis哨兵（Sentinel）</a>和自动 <a href="http://www.redis.cn/topics/cluster-tutorial.html">分区（Cluster）</a>提供高可用性（high availability）</p>
<p>Redis 是单线程的，但是运行速度十分的快，一秒钟读取接近十万条读取数据</p>
<p>CPU&gt;内存&gt;硬盘</p>
<p>核心：Redis 将所有数据全部放在内存中，所以读写速度非常快</p>
<h3 id="启动-Redis"><a href="#启动-Redis" class="headerlink" title="启动 Redis"></a>启动 Redis</h3><p>在 Windows 和 Linux 的系统配置文件中，我们能看到 Redis 的映射端口等等</p>
<p>一般默认的端口为6379，据说跟开发者喜欢的一个女明星的姓名有关，咳咳，扯远了</p>
<p>Windows 下的 Redis 只需要打开 exe 文件即可，Linux 需要使用 redis-cli</p>
<p>启动 redis 服务器，打开终端并输入命令 <strong>redis-cli</strong>，该命令会连接本地的 redis 服务</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ redis-cli
redis <span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span>
redis <span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> PING

PONG<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="Redis-命令"><a href="#Redis-命令" class="headerlink" title="Redis 命令"></a>Redis 命令</h3><h4 id="Redis-基本"><a href="#Redis-基本" class="headerlink" title="Redis 基本"></a>Redis 基本</h4><p>select index 切换数据库 一共有16个数据库 默认为1</p>
<p>keys * 查询当前数据库中所有的键</p>
<p>FLUSHALL 清空全部数据库内容</p>
<p>flushdb 清除当前数据库的内容</p>
<p>DBSIZE 查询当前数据库中的各种数据</p>
<p>EXISTS 判断键名是否存在</p>
<p>move 将数据进行移除</p>
<h4 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h4><p>（90%java程序员只会用这个类型（x）</p>
<p>append 通过这个命令，将String类型的值添加进去</p>
<p>strlen 获取当前字符串的长度</p>
<p>type 判断某个key的类型</p>
<p>incr 使字段自增1</p>
<p>decr 使字段自减1</p>
<p>INCRBY 设置增加自增步长，相当于设定自增长度</p>
<p>DECRBY 设置增加自减步长，相当于设定自减长度</p>
<p>GETRANGE 截取范围内长度的字符串</p>
<p>SETRANGE 设定特定位置的字符</p>
<p>setex （设置存在）设置过期时间</p>
<p>setnx （设置不存在） 设置存在时间</p>
<p>ttl 查看当前字段过期时间</p>
<p>rename 重命名一个key</p>
<p>randomkey 随机一个key</p>
<p>mset 批量设置键值</p>
<p>mget 批量获取键值</p>
<p>msetnx 是一个原子性操作，要么一起成功，要么一起失败</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> mset user:2:name cxy user:2:age <span class="token number">3</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> mget user:2:name user:2:age
<span class="token comment">#设置json数组</span>
<span class="token comment">#获取json数组中的值</span>

<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">set</span> user:1 <span class="token punctuation">{</span>name:zhangsan,age:3<span class="token punctuation">}</span>
<span class="token comment">#设置json数组的另外一种方式</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>getset 先获取值，再将值设置为之后的值（如果没有值，会报错）</p>
<p>String类型能做的事情</p>
<p>1.计数器（可以对一个字段设置自增）</p>
<p>2.统计多单位的数量</p>
<h4 id="List"><a href="#List" class="headerlink" title="List"></a>List</h4><p>基本数据类型，列表，所有的 list 命令都是 l 开头的</p>
<p>（Redis 不区分大小写命令）</p>
<p>LPUSH 将一个值添加到左边</p>
<p>RPUSH 将一个值添加到右边</p>
<p>LRANGE 获取0 -1 表示获取全部的值（0 1表示获取两个值）（-1 表示整个链表的倒数第一个）</p>
<p>LPOP 将一个左边的值移除</p>
<p>RPOP 将一个右边的值移除</p>
<p>Lindex 获取某个特定下标的值</p>
<p>LLEN 获取list类型的具体长度</p>
<p>lrem 移除集合中特定的值，并且可以设置移除个数 </p>
<p>ltrim 截取特定长度</p>
<p>rpoplpush 将左边的键中的值移动到另一个键中</p>
<p>exists 判断一个表知否存在</p>
<p>lset 设置表中某个具体的下标中的值</p>
<p>linsert <listname> before 在指定值前面添加一个值</listname></p>
<p>其实这个东西就相当于一个链表，左右两边都是可以插入值</p>
<p>如果key不存在，创建新的链表</p>
<p>如果key存在，新增内容</p>
<p>如果移除了所有的值，空链表，也代表不存在</p>
<p>可以实现的东西：</p>
<p>消息排队，消息队列，栈</p>
<h4 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h4><p>（命令都是s开头）</p>
<p>sadd 向一个key中添加一个值（set中的值是不能重复的）</p>
<p>smembers 查看指定key中的所有值</p>
<p>sismember 查看某个值是否在对应key中</p>
<p>srem 移除key中的指定元素</p>
<p>scard 获取key中的元素个数</p>
<p>set因为是无序不重复键值，可以做一个随机筛选</p>
<p>srandmember 在某个key中进行随机的筛选</p>
<p>smove 将某个key中的值移到另一个key中</p>
<p>set可以使用数字集合类指令</p>
<p>sdiff 取两个key中的差集</p>
<p>sinter 取两个key中的交集（实现共同好友）</p>
<p>sunion 取两个key中的并集</p>
<p>可以实现的功能：</p>
<p>共同信息，共同爱好。通过取两个 key 中的交集</p>
<p>二度好友（六度分割，认为世界上任何互不相识的两人，只需要很少的中间人就能够建立起联系。<a href="https://zh.wikipedia.org/wiki/%E5%93%88%E4%BD%9B%E5%A4%A7%E5%AD%B8">哈佛大学</a>心理学教授<a href="https://zh.wikipedia.org/wiki/%E6%96%AF%E5%9D%A6%E5%88%A9%C2%B7%E7%B1%B3%E5%B0%94%E6%A0%BC%E6%8B%89%E5%A7%86">斯坦利·米尔格拉姆</a>于1967年根据这个概念做过一次连锁信实验，尝试证明平均只需要6步就可以联系任何两个互不相识的人）</p>
<h4 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h4><p> 相当于一个Map集合</p>
<p>hset 为一个key设置值</p>
<p>hget 获取一个key的值（也可以获取多个key值）</p>
<p>hgetall 获取key中的所有值</p>
<p>hdel 删除对应key字段</p>
<p>hlen获取key表的字段数量</p>
<p>hexists 判断key中指定的字段是否存在</p>
<p>hkeys 只获得所有的field</p>
<p>hvals 只获得所有的value</p>
<p>（像是hincrby hdecrby这种命令也是可以使用的）</p>
<p>hash主要用来存储经常变更的信息，主要是对象的存储</p>
<p>String更适合字符串的存储</p>
<h4 id="Zset（有序集合）"><a href="#Zset（有序集合）" class="headerlink" title="Zset（有序集合）"></a>Zset（有序集合）</h4><p>zadd 向一个zset类型中添加值，可以添加多个值</p>
<p>（- +）inf（正负无穷的大小排序）</p>
<p>zrangebyscore 通过特定的key对数据进行排序，可以设置从负无穷到正无穷</p>
<p>（之前的一些命令都是共同的，可以使用zrange命令）</p>
<p>zrem 移除某个东西</p>
<p>zcard 获取有序集合中的个数</p>
<p>zrevrange 从大到小进行排序</p>
<p>zcout 指定区间key的个数</p>
<h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>（一组命令的集合）</p>
<p>一次性、顺序性、排他性，执行一系列的命令</p>
<p>Redis单条命令是保存原子性的（要么同时成功，要么同时失败）</p>
<p>但是Redis事务是不保证原子性的</p>
<p>1.开启事务（multi）</p>
<p>2.添加命令</p>
<p>3.执行事务（exec）（在执行事务之前，如果不执行事务，是不会启动的）</p>
<p>discard 取消事务</p>
<h3 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h3><p>watch 给特定的key添加一个乐观锁</p>
<p>unwatch 解除key的乐观锁</p>
<p>这样就可以防止多线程的重复操作，防止并发</p>
<p>编译性错误：事务中的所有命令都无法执行（代码语法错误）</p>
<p>运行性错误：事务中的除错误命令之外，其他的命令都是可以执行的</p>
<h3 id="Spring-Boot-整合-redis"><a href="#Spring-Boot-整合-redis" class="headerlink" title="Spring-Boot 整合 redis"></a>Spring-Boot 整合 redis</h3><p>jedis（使用Java来操作redis）（在springboot2.x之后已经被改成lettuce）</p>
<p>jedis：采用的直连，多个线程操作话是不安全的，如果想要避免</p>
<p>lettuce：采用netty（高性能网络结构，异步传值），实例可以在多个线程中进行共享，不存在线程不安全的情况，可以减少线程数据</p>
<p>原子性（atomicity）：</p>
<p>一个事务是一个不可分割的最小工作单位，事务中包括的诸操作要么都做，要么都不做。</p>
<p>Redis所有单个命令的执行都是原子性的，这与它的单线程机制有关；</p>
<p>Redis命令的原子性使得我们不用考虑并发问题，可以方便的利用原子性自增操作INCR实现简单计数器功能;</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>sast<span class="token punctuation">.</span>atsast</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>connection<span class="token punctuation">.</span></span><span class="token class-name">RedisConnection</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RedisTemplate</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * @program: atSast
 * @summary: 对jedis进行测试
 * @author: cxy621
 * @create: 2021-07-23 13:45
 **/</span>
<span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JedisTest</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span> redisTemplate<span class="token punctuation">;</span>
	<span class="token comment">//opsforValue String</span>
    <span class="token comment">//opsforList List</span>
    <span class="token comment">//opsforSet Set</span>
    <span class="token comment">//opsforHash Hash</span>
    <span class="token comment">//opsforZSet Zset</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lettuceTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">//        RedisConnection redisConnection = redisTemplate.getConnectionFactory().getConnection();</span>
<span class="token comment">//        redisConnection.flushAll();</span>
<span class="token comment">//        redisConnection.flushDb();</span>

        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"cxy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>所有的对象需要序列化</p>
<p>如果没有序列化就会报错</p>
<p>对于没有序列化的值，Java中会有自带的jdk自带的序列化，但是如果不自己配置redis，会自动出现转义字符</p>
<p>可以自己自己去设置redis工具类，重写redisUtil，就不需要调用原生麻烦的包了</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">redis</span><span class="token punctuation">:</span>
    <span class="token comment"># Redis数据库索引（默认为0）</span>
    <span class="token key atrule">database</span><span class="token punctuation">:</span> <span class="token number">0</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>
    <span class="token key atrule">password</span><span class="token punctuation">:</span>
    <span class="token key atrule">connect-timeout</span><span class="token punctuation">:</span> <span class="token number">300</span>
    <span class="token key atrule">jedis</span><span class="token punctuation">:</span>
      <span class="token key atrule">pool</span><span class="token punctuation">:</span>
        <span class="token comment">#连接池最大连接数（使用负值表示没有限制）</span>
        <span class="token key atrule">max-active</span><span class="token punctuation">:</span> <span class="token number">8</span>
        <span class="token comment"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span>
        <span class="token key atrule">max-wait</span><span class="token punctuation">:</span> <span class="token number">-1</span>
        <span class="token comment"># 连接池中的最大空闲连接</span>
        <span class="token key atrule">max-idle</span><span class="token punctuation">:</span> <span class="token number">8</span>
        <span class="token comment"># 连接池中的最小空闲连接</span>
        <span class="token key atrule">min-idle</span><span class="token punctuation">:</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>通过源码可以看出，SpringBoot 自动帮我们在容器中生成了一个 RedisTemplate 和一个 StringRedisTemplate。</strong>但是，这个RedisTemplate 的泛型是 &lt;Object,Object&gt;，写代码不方便，需要写好多类型转换的代码；我们需要一个泛型为 &lt;String,Object&gt; 形式的RedisTemplate。并且，这个RedisTemplate没有设置数据存在 Redis 时，key 及 value 的序列化方式</p>
<p>编写redis配置类，内容如下，在该类中完成Jedis池、Redis连接和RedisTemplate序列化三个配置完成springboot整合redis的进一步配置。其中RedisTemplate对key和value的序列化类，各人结合自己项目情况进行选择即可</p>
<p>除此之外，直接这样使用 RedisTemplate 还是会比较麻烦，我们可以自己写一个工具类，这样</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring-Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 进阶</title>
    <url>/2021/12/07/mysql-jin-jie/</url>
    <content><![CDATA[<h2 id="MySQL常用函数"><a href="#MySQL常用函数" class="headerlink" title="MySQL常用函数"></a>MySQL常用函数</h2><h3 id="字符函数"><a href="#字符函数" class="headerlink" title="字符函数"></a>字符函数</h3><table>
<thead>
<tr>
<th align="center">函数</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">CONCAT(s1,s2…sn)</td>
<td align="center">字符串 s1,s2 等多个字符串合并为一个字符串</td>
</tr>
<tr>
<td align="center">INSERT(s1,x,len,s2)</td>
<td align="center">字符串 s2 替换 s1 的 x 位置开始长度为 len 的字符串</td>
</tr>
<tr>
<td align="center">LOWER(s)</td>
<td align="center">将字符串 s 的所有字母变成小写字母</td>
</tr>
<tr>
<td align="center">REPLACE(s,s1,s2)</td>
<td align="center">将字符串 s2 替代字符串 s 中的字符串 s1</td>
</tr>
<tr>
<td align="center">REVERSE(s)</td>
<td align="center">将字符串s的顺序反过来</td>
</tr>
<tr>
<td align="center">TRIM(s)</td>
<td align="center">去掉字符串 s 开始和结尾处的空格</td>
</tr>
</tbody></table>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT CONCAT("SQL ", "Runoob ", "Gooogle ", "Facebook") AS ConcatenatedString;

SELECT INSERT("google.com", 1, 6, "runoob");  -- 输出：runoob.com P.S. 下标从1开始（insert是函数不是SQL命令）

SELECT REPLACE('abc','a','x') --xbc

SELECT REVERSE('abc') -- cba

SELECT TRIM("    RUNOOB     ") AS LeftTrimmedString;-- RUNOOB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="数字函数"><a href="#数字函数" class="headerlink" title="数字函数"></a>数字函数</h3><table>
<thead>
<tr>
<th align="center">函数</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">AVG(expression)</td>
<td align="center">返回一个表达式的平均值，expression 是一个字段</td>
</tr>
<tr>
<td align="center">COUNT(expression)</td>
<td align="center">返回查询的记录总数，expression 参数是一个字段或者 * 号</td>
</tr>
<tr>
<td align="center">MAX(expression)</td>
<td align="center">返回字段 expression 中的最大值</td>
</tr>
<tr>
<td align="center">RAND()</td>
<td align="center">返回 0 到 1 的随机数</td>
</tr>
<tr>
<td align="center">ROUND(x)</td>
<td align="center">返回离 x 最近的整数</td>
</tr>
<tr>
<td align="center">SQRT(x)</td>
<td align="center">返回x的平方根</td>
</tr>
<tr>
<td align="center">SUM(expression)</td>
<td align="center">返回指定字段的总和</td>
</tr>
</tbody></table>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT AVG(Price) AS AveragePrice FROM Products;

SELECT COUNT(ProductID) AS NumberOfProducts FROM Products;

SELECT MAX(Price) AS LargestPrice FROM Products;

SELECT RAND() --0.93099315644334

SELECT ROUND(1.23456) --1

SELECT SUM(Quantity) AS TotalItemsOrdered FROM OrderDetails;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h3><table>
<thead>
<tr>
<th align="center">函数</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">CURTIME()</td>
<td align="center">返回当前时间</td>
</tr>
<tr>
<td align="center">DATE()</td>
<td align="center">从日期或日期时间表达式中提取日期值</td>
</tr>
<tr>
<td align="center">LOCALTIME()</td>
<td align="center">返回当前日期和时间</td>
</tr>
<tr>
<td align="center">NOW()</td>
<td align="center">返回当前日期和时间</td>
</tr>
</tbody></table>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT CURTIME();
-&gt; 19:59:02

SELECT DATE("2017-06-15");    
-&gt; 2017-06-15

SELECT LOCALTIME()
-&gt; 2018-09-19 20:57:43

SELECT NOW()
-&gt; 2018-09-19 20:57:43<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="实践使用"><a href="#实践使用" class="headerlink" title="实践使用"></a>实践使用</h3><p>现在你们就知道我们使用 group by 的目的了，就是为了对设定的列进行使用函数进行计算</p>
<p>要注意的一点是，如果需要在 group by 中进行条件判断，需要使用 having</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select `job_name`, count(`name`) as `all_nums`
from `employees`
group by `job_id`
having `salary` &gt; 12000;
#统计employees表中不同工种中薪资大于12000的员工个数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="MySQL-union"><a href="#MySQL-union" class="headerlink" title="MySQL union"></a>MySQL union</h2><p><strong>UNION 语句</strong>：用于将不同表中相同列中查询的数据展示出来；（不包括重复数据）</p>
<p><strong>UNION ALL 语句</strong>：用于将不同表中相同列中查询的数据展示出来；（包括重复数据）</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT country FROM Websites
UNION
SELECT country FROM apps
ORDER BY country;
-- 从两个表中查询不同国家的列

SELECT country FROM Websites
UNION ALL
SELECT country FROM apps
ORDER BY country;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="MySQL-事务"><a href="#MySQL-事务" class="headerlink" title="MySQL 事务"></a>MySQL 事务</h2><p>MySQL 的事务简要来说就是，要么都成功，要么都失败</p>
<p>这就保证我们在插入一个表失败的时候，不会影响到其他表。因为MySQL有自动提交模式（即执行 SQL 语句后就会马上执行 COMMIT 操作。因此要显式地开启一个事务务须使用命令 BEGIN 或 START TRANSACTION，或者执行命令 SET AUTOCOMMIT=0，用来禁止使用当前会话的自动提交）</p>
<h3 id="满足条件（ACID）"><a href="#满足条件（ACID）" class="headerlink" title="满足条件（ACID）"></a>满足条件（ACID）</h3><ul>
<li><strong>原子性：</strong>一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样</li>
<li><strong>一致性：</strong>在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设规则，这包含资料的精确度、串联性以及后续数据库可以自发性地完成预定的工作</li>
<li><strong>隔离性：</strong>数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）</li>
<li><strong>持久性：</strong>事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失</li>
</ul>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">set autocommit = 0 -- 关闭自动提交
start transaction -- 标记一个事务的开始
insert into `student`(`name`, `age`) values('cxy', 18)
insert into `employee`(`name`, `job`, `location`) values('ckt', 20, '南京市')
commit -- 提交：持久化（成功）
rollback
set autocommit = 1 -- 开启自动提交

savepoint 保存点名 -- 设置一个事务的保存点
rollback to savepoint 保存点名
release savepoint -- 撤销保存点<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="可能问题"><a href="#可能问题" class="headerlink" title="可能问题"></a>可能问题</h3><ul>
<li>脏读：一个事务在执行的过程中读取到了其他事务还没有提交的数据</li>
<li>读已提交：一个事务操作过程中可以读取到其他事务已经提交的数据</li>
<li>不可重复读：在同一事务中，多次读取同一数据返回的结果有所不同，换句话说，后续读取可以读到另一事务已提交的更新数据</li>
<li>可重复读：一个事务操作中对于一个读取操作不管多少次，读取到的结果都是一样的</li>
<li>幻读：<ul>
<li>事务A操作如下： 1、打开事务 2、查询号码为X的记录，不存在 3、插入号码为X的数据，插入报错（为什么会报错，先向下看） 4、查询号码为X的记录，发现还是不存在</li>
<li>事物B操作：在事务A第2步操作时插入了一条X的记录，所以会导致A中第3步插入报错</li>
<li><strong>事务中后面的操作（插入号码X）需要上面的读取操作（查询号码X的记录）提供支持，但读取操作却不能支持下面的操作时产生的错误，就像发生了幻觉一样</strong></li>
</ul>
</li>
</ul>
<h2 id="MySQL-索引"><a href="#MySQL-索引" class="headerlink" title="MySQL 索引"></a>MySQL 索引</h2><p>在 MySQL 中，我们会面对大量的数据。假设我们有100万条数据，那么如果我们在所有数据中查找一条数据，我们可以需要耗时一秒，这是非常缓慢的。但是如果我们创建了对应的索引，那么时间的开销可能会被压缩到0.07秒这样</p>
<p>MySQL支持诸多存储引擎，而各种存储引擎对索引的支持也各不相同，因此MySQL数据库支持多种索引类型，如BTree索引，哈希索引，全文索引等等，这样就能尽量减少时间开销</p>
<p>大部分数据库系统及文件系统都采用B-Tree或其变种B+Tree作为索引结构，MySQL就普遍使用B+Tree实现其索引结构</p>
<p>这样索引的弊端也就很明显了。虽然索引可以大大加快查询的速度，但是会增加内存开销，并且在增删改的时候，时间开销会大大增加。索引文件本身要消耗存储空间</p>
<p>InnoDB使用聚集索引，数据记录本身被存于主索引（一颗B+Tree）的叶子节点上。这就要求同一个叶子节点内（大小为一个内存页或磁盘页）的各条数据记录按主键顺序存放，因此每当有一条新的记录插入时，MySQL会根据其主键将其插入适当的节点和位置，如果页面达到装载因子（InnoDB默认为15/16），则开辟一个新的页（节点）</p>
<p>如果表使用自增主键，那么每次插入新的记录，记录就会顺序添加到当前索引节点的后续位置，当一页写满，就会自动开辟一个新的页</p>
<p><img src="https://blog.codinglabs.org/uploads/pictures/theory-of-mysql-index/13.png" alt="例子如图"></p>
<p>这样就会形成一个紧凑的索引结构，近似顺序填满。由于每次插入时也不需要移动已有数据，因此效率很高，也不会增加很多开销在维护索引上。</p>
<p>如果使用非自增主键（如果身份证号或学号等），由于每次插入主键的值近似于随机，因此每次新纪录都要被插到现有索引页得中间某个位置</p>
<p><img src="https://blog.codinglabs.org/uploads/pictures/theory-of-mysql-index/14.png" alt="举例"></p>
<h2 id="MySQL-三大范式"><a href="#MySQL-三大范式" class="headerlink" title="MySQL 三大范式"></a>MySQL 三大范式</h2><h3 id="第一范式"><a href="#第一范式" class="headerlink" title="第一范式"></a>第一范式</h3><p>数据表的每一列都要保持它的原子特性，也就是列不能再被分割</p>
<h3 id="第二范式"><a href="#第二范式" class="headerlink" title="第二范式"></a>第二范式</h3><p>在第一范式满足的基础上，我们考虑第二范式</p>
<p>属性必须完全依赖于主键，每张表只描述一件事情</p>
<h3 id="第三范式"><a href="#第三范式" class="headerlink" title="第三范式"></a>第三范式</h3><p>在第一、第二范式的基础上，我们考虑第三范式</p>
<p>所有的非主属性不依赖于其他的非主属性</p>
<h3 id="实际使用"><a href="#实际使用" class="headerlink" title="实际使用"></a>实际使用</h3><p>三大范式给了我们一个良好的规范，这样就容易导致我们创建多个表</p>
<p>所以我们在考虑三大范式的同时，需要关注我们数据库本身的效率。我们可以在效率的基础上同时考虑规范</p>
<h2 id="MySQL-备份"><a href="#MySQL-备份" class="headerlink" title="MySQL 备份"></a>MySQL 备份</h2><p>在平时使用的时候，为了防止我们服务器或者本机因为特殊原因导致数据数据丢失，我们需要不定时的对数据进行备份</p>
<ul>
<li>在物理层面：因为 MySQL 都是存储在磁盘中的 data 中，我们可以直接把 data 中的文件进行拷贝</li>
<li>在命令层面：我们使用 mysqldump 对数据进行备份</li>
</ul>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysqldump -uroot -proot --all-databases &gt;/tmp/all.sql
-- 例1：导出所有的数据库

mysqldump -uroot -proot --databases db1 db2 &gt;/tmp/db1_and_db2.sql
-- 例2：导出数据库 db1,db2 中所有的数据

mysqldump -uroot -proot --databases db1 --tables a1 a2 &gt;/tmp/db1.sql
-- 例3：导出数据库 db1 中的 a1,a2 表<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当然，在 navicat 这种可视化界面中，我们导出导入仅仅只是点击的事情</p>
<p>我们在发生错误的时候，也需要去查看 MySQL 的错误日志（去年就有过因为没有更新字段的类型，从而不得不去日志文件中逐个正则匹配的大冷门事件）</p>
<h2 id="MySQL-其他用处"><a href="#MySQL-其他用处" class="headerlink" title="MySQL 其他用处"></a>MySQL 其他用处</h2><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><p>我们可以使用 MySQL 进行用户的管理。我们有着一个管理员 root，我们可以对其他用户进行管理，给他们设定特定的权限。这样就能保证在协同工作的时候，别人不会直接删库跑路（x</p>
<p>在 navicat 中，可视化界面使用的会非常舒服</p>
<h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><p>视图的作用就是用来简化我们的 SQL 代码。我们可以将一个查询语句都设置为视图，这样我们的代码就会十分简洁</p>
<p>但是要注意，既然这样做，那么我们每次调用视图就都会执行一遍查询操作，这会导致我们的查询效率大大降低</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create view product_total as
select cust_name, cust_contact, prod_id
from customers, orders, orderitems
where customers.cust_id = orders.cust_id
and orderitems.order_num = orders.order_num
-- 此时，我们就将这些东西都作为了一个视图，我们在使用的时候就只需要调用 product_total 即可<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在 navicat 中，我们可以直接使用视图的界面进行操作</p>
<p><img src="https://gitee.com/chen-xinyang666/pictures/raw/master/202112081047724.png" alt="方便快捷"></p>
<h2 id="题外话：MySQL-配置"><a href="#题外话：MySQL-配置" class="headerlink" title="题外话：MySQL 配置"></a>题外话：MySQL 配置</h2><h3 id="0x00-写在前面"><a href="#0x00-写在前面" class="headerlink" title="0x00 写在前面"></a>0x00 写在前面</h3><p>​    <strong>如果你只想要一个纯净的 MySQL，我更推荐直接参考<a href="https://www.runoob.com/mysql/mysql-install.html">菜鸟教程</a>。</strong></p>
<p>​    在配置文件的时候可能会比较麻烦，但是体验会比直接去 Oracle 官网要好。如果使用这个教程安装之后，你们可能还需要修改 root 的密码，可以参考这个<a href="http://c.biancheng.net/view/7263.html#:~:text=MySQL%E4%BF%AE%E6%94%B9root%E5%AF%86%E7%A0%81%201%20%E4%BD%BF%E7%94%A8mysqladmin%E5%91%BD%E4%BB%A4%E5%9C%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%8C%87%E5%AE%9A%E6%96%B0%E5%AF%86%E7%A0%81....,2%20%E4%BF%AE%E6%94%B9MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84user%E8%A1%A8%203%20%E4%BD%BF%E7%94%A8SET%E8%AF%AD%E5%8F%A5%E4%BF%AE%E6%94%B9root%E7%94%A8%E6%88%B7%E7%9A%84%E5%AF%86%E7%A0%81">网站</a>。</p>
<h3 id="0x01-官网安装MySQL"><a href="#0x01-官网安装MySQL" class="headerlink" title="0x01 官网安装MySQL"></a>0x01 官网安装MySQL</h3><p>​    首先我们进入 <a href="https://www.mysql.com/downloads/">MySQL官网</a>。<img src="https://gitee.com/chen-xinyang666/pictures/raw/master/202112021202255.png" alt="进入下载界面"></p>
<p><img src="https://gitee.com/chen-xinyang666/pictures/raw/master/202112071756871.png" alt="点击安装社区版"></p>
<p>​    </p>
<p>安装界面一共有两个版本，上面是线上安装，下面是线下安装版本。建议使用线下安装。</p>
<p><img src="https://gitee.com/chen-xinyang666/pictures/raw/master/202112021203108.png" alt="选择下面的离线安装"></p>
<p><img src="https://gitee.com/chen-xinyang666/pictures/raw/master/202112021205586.png" alt="不用登录"></p>
<p>​    这里我们选择 Server only 安装即可，我们只需要一个 MySQL 而不是一个完整的东西。</p>
<p><img src="https://gitee.com/chen-xinyang666/pictures/raw/master/202112022211705.png" alt="安装客户端界面"></p>
<p>​    点击 Execute 之后就可以开始安装了</p>
<p><img src="https://gitee.com/chen-xinyang666/pictures/raw/master/202112022212280.png" alt="image-20211202221214215"></p>
<p>​    这个界面直接 next</p>
<p><img src="https://gitee.com/chen-xinyang666/pictures/raw/master/202112071756907.png" alt="image-20211202162410024"></p>
<p>​    这里是设置 MySQL 连接的页面，可以看到默认的端口是3306，这里我们直接默认就可以</p>
<p><img src="https://gitee.com/chen-xinyang666/pictures/raw/master/202112071756902.png" alt="设置MySQL连接界面"></p>
<p>​    这个时候我们可以设定我们 root 账号的密码。root 相当于 MySQL 的管理员，拥有最高权限，请一定要记住自己的密码。</p>
<p><img src="https://gitee.com/chen-xinyang666/pictures/raw/master/202112021637002.png" alt="设定用户"></p>
<p>​    后面的我们一路 execute 和 next 就可以了</p>
<p><img src="https://gitee.com/chen-xinyang666/pictures/raw/master/202112071756788.png" alt="默认即可"></p>
<p><img src="https://gitee.com/chen-xinyang666/pictures/raw/master/202112021639410.png" alt="安装好之后下一步"></p>
<p><img src="https://gitee.com/chen-xinyang666/pictures/raw/master/202112021639740.png" alt="查看我们的配置，下一步即可"></p>
<p>​    <img src="https://gitee.com/chen-xinyang666/pictures/raw/master/202112071756966.png" alt="确认一下我们主机名、端口号等等"></p>
<p>​    这里我们得输入一遍我们之前自己设定的密码，也是官方防止我们忘记。</p>
<p><img src="https://gitee.com/chen-xinyang666/pictures/raw/master/202112021647082.png" alt="防止我们忘记之前设定的密码"></p>
<p>​    之后我们一路 next 安装就结束了。</p>
<p><img src="https://gitee.com/chen-xinyang666/pictures/raw/master/202112021653661.png" alt="直接下一步"></p>
<p><img src="https://gitee.com/chen-xinyang666/pictures/raw/master/202112071756148.png" alt="表示安装成功"></p>
<h3 id="0x02-确认安装成功"><a href="#0x02-确认安装成功" class="headerlink" title="0x02 确认安装成功"></a>0x02 确认安装成功</h3><p>​    我们打开 C 盘，确认一下我们 MySQL 的安装位置，并把 bin 包添加到系统变量中。具体如何添加系统环境变量，如何添加请同学们自行百度。</p>
<p><img src="https://gitee.com/chen-xinyang666/pictures/raw/master/202112071756924.jpeg" alt="默认地点为就是显示的地址"></p>
<p>​    之后我们打开 cmd，就可以对 MySQL 进行操作了。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysql --version
<span class="token comment">#查看mysql版本号，用来查看我们是否安装成功</span>

mysql -u root -p
<span class="token comment">#-u表示用户名，-p表示密码，使用这个命令连接mysql</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://gitee.com/chen-xinyang666/pictures/raw/master/202112021702022.png" alt="mysql 8.0.25"></p>
<h3 id="0x03-激活-navicat"><a href="#0x03-激活-navicat" class="headerlink" title="0x03 激活 navicat"></a>0x03 激活 navicat</h3><p>​    激活 navicat 可以直接参考这个<a href="https://cloud.tencent.com/developer/article/1804255">网站</a></p>
<p>​    需要使用的工具：navicat 安装包、破解软件（会被 Windows defender 误报）</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>UWP 复习</title>
    <url>/2022/01/03/uwp-tong-yong-windows-kai-fa-fu-xi/</url>
    <content><![CDATA[<h2 id="0x00-写在前面"><a href="#0x00-写在前面" class="headerlink" title="0x00 写在前面"></a>0x00 写在前面</h2><p>因为马上就要考试了，所以写一个博客对知识点进行总结</p>
<p>自己写 Java 后端也有一定的时间了，所以想着尝试用其他的语言进行后端开发</p>
<h2 id="0x01-文件结构"><a href="#0x01-文件结构" class="headerlink" title="0x01 文件结构"></a>0x01 文件结构</h2><ul>
<li><p>我们首先会创建了一个解决方案，一个解决方案里面可能有很多项目（加粗的项目作为启动项目，只有启动项目启动之后剩余的项目才能进行加载）。默认的解决方案中，我们只有一个项目</p>
</li>
<li><p>在 Properties 中，保存我们相关项目的信息</p>
</li>
<li><p>引用中包含我们调用的各种库</p>
</li>
<li><p>App.xaml/App.xaml.cs 表示应用程序的最先加载的程序</p>
</li>
<li><p>MainPage.xaml UWP 默认加载的主页面</p>
</li>
</ul>
<p>每一个界面中都会有一个 InitializeComponent 方法，在这个方法的源代码中，会有对 xaml 中各种控件(control)的加载，这样就能在启动之后显示我们的所设置的布局</p>
<p><img src="https://gitee.com/chen-xinyang666/pictures/raw/master/202201031721990.png" alt="InitializeComponent 源代码"></p>
<h2 id="0x02-生命周期"><a href="#0x02-生命周期" class="headerlink" title="0x02 生命周期"></a>0x02 生命周期</h2><p>应用程序的生命周期是指从应用程序部署到计算机上到应用程序从计算机中删除 的整个阶段</p>
<p><img src="https://gitee.com/chen-xinyang666/pictures/raw/master/202201040941156.png" alt="在 app.xaml.cs 中定义的几个状态"></p>
<p><img src="https://gitee.com/chen-xinyang666/pictures/raw/master/202201040942779.png" alt="显示应用执行状态之间转换的状态图"></p>
<p>当启动或激活应用时，这些应用会进入在后台运行状态。 如果应用由于前台应用启动而需要移动到前台，则该应用将获取 <a href="https://docs.microsoft.com/en-us/uwp/api/windows.applicationmodel.core.coreapplication.leavingbackground"><strong>LeavingBackground</strong></a> 事件</p>
<p>由于预启动，应用的 <strong>OnLaunched ()</strong> 方法可能由系统启动，而不是由用户启动。 由于应用在后台预启动，因此可能需要在 <strong>OnLaunched()</strong> 中采取不同操作</p>
<p>当用户最小化某个应用时，Windows 会等待数秒，以查看用户是否会切换回该应用。 如果用户在此时间范围内未切换回，并且任何扩展执行、后台任务或活动赞助执行都未处于活动状态，则 Windows 将暂停该应用。 只要应用中不存在任何处于活动状态的扩展执行会话等，该应用也将在出现锁屏界面时暂停</p>
<h3 id="app-data-session-data"><a href="#app-data-session-data" class="headerlink" title="app data/session data"></a>app data/session data</h3><p>app data 是和应用程序相关的内容，在应用程序的整个生命周期中都存在的</p>
<p>当我们需要保存应用程序的某些数据以便下一次访问时依然可以 使用时，我们可以将数据保存成应用程序数据（即 app data），也可以将数据写到 文件中</p>
<pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">Windows.Storage.ApplicationDataContainer localSettings = 
    Windows.Storage.ApplicationData.Current.LocalSettings;
localSettings.Values["Name"] = TextBox1.Text;
//将我们的数据暂存到 localSetting 中，可以理解为一个缓存<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="0x03-基本控件"><a href="#0x03-基本控件" class="headerlink" title="0x03 基本控件"></a>0x03 基本控件</h2><h3 id="选择控件"><a href="#选择控件" class="headerlink" title="选择控件"></a>选择控件</h3><ul>
<li><p>RadioButton 单选按钮，在多个选项中可以使用 GroupName 进行分组</p>
<pre class="line-numbers language-xaml" data-language="xaml"><code class="language-xaml">&lt;StackPanel&gt;
    &lt;RadioButton Content="好" GroupName="comment"/&gt;
    &lt;RadioButton Content="一般" GroupName="comment"/&gt;
    &lt;RadioButton Content="差" GroupName="comment"/&gt;
&lt;/StackPanel&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>ComboBox 下拉框，可以在下拉框中添加各种奇怪的控件（x</p>
<pre class="line-numbers language-xaml" data-language="xaml"><code class="language-xaml"> &lt;ComboBox Header="show something to me" FontSize="32"
                      PlaceholderText="take a ability"
                      PlaceholderForeground="Gray"&gt;
	&lt;x:String&gt;Blue&lt;/x:String&gt;
    &lt;x:String&gt;Green&lt;/x:String&gt;
    &lt;x:String&gt;Red&lt;/x:String&gt;
    &lt;x:String&gt;Yellow&lt;/x:String&gt;
    &lt;TextBlock Text="this is just a test"/&gt;
     &lt;!--这种控件添加到 ComboBox 也是被允许的--&gt;
&lt;/ComboBox&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>CheckBox 复选框，提供多选功能。可以有三种状态，表示未选中、未全选、完全选中</p>
<pre class="line-numbers language-xaml" data-language="xaml"><code class="language-xaml">&lt;CheckBox Content="hello" FontSize="32" IsThreeState="True" IsChecked="{x:Null}"/&gt;
&lt;!--对应代码为 false, x:null, true--&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li><p>Button 最常用的按钮控件（在这里提醒一点，基本所有控件的大小默认都是根据字体大小，即 FontSize 自动调整的，默认的属性为 Auto）。除了在按钮中使用默认的 Content 属性，还可以使用 Image、TextBlock 控件包裹在里面</p>
<pre class="line-numbers language-xaml" data-language="xaml"><code class="language-xaml">&lt;Button Content="Standard XAML button" Click="Button_Click" /&gt;

&lt;Button Content="Button" Click="Button_Click" AutomationProperties.Name="Pie"&gt;
    &lt;Image Source="/Assets/Slices.png" AutomationProperties.Name="Slice"/&gt;
&lt;/Button&gt;

&lt;StackPanel&gt;
    &lt;TextBlock Text="The following buttons' content may get 
                     clipped if we don't pay careful attention to their layout containers." 
               Margin="0,0,0,8" TextWrapping="Wrap"/&gt;
    &lt;TextBlock Text="One option to mitigate clipped content 
                     is to place Buttons underneath each other, allowing for more space to grow horizontally:" 
               Margin="0,0,0,8" TextWrapping="Wrap"/&gt;
    &lt;Button HorizontalAlignment="Stretch" Margin="0,0,0,5"&gt;
        This is some text that is too long and will get cut off
    &lt;/Button&gt;
    &lt;Button HorizontalAlignment="Stretch"&gt;
        This is another text that would result in being cut off
    &lt;/Button&gt;
    &lt;TextBlock Text="Another option is to explicitly wrap the Button's content" Margin="0,8,0,8"/&gt;
    &lt;StackPanel Orientation="Horizontal" HorizontalAlignment="Center"&gt;
        &lt;Button MaxWidth="240" Margin="0,0,8,0"&gt;
            &lt;TextBlock Text="This is some text that is too long and will get cut off" 
                       TextWrapping="WrapWholeWords"/&gt;
        &lt;/Button&gt;
        &lt;Button MaxWidth="240"&gt;
            &lt;TextBlock Text="This is another text that would result in being cut off" 
                       TextWrapping="WrapWholeWords"/&gt;
        &lt;/Button&gt;
    &lt;/StackPanel&gt;
&lt;/StackPanel&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>HyperlinkButton 表示超链接跳转</p>
<pre class="line-numbers language-xaml" data-language="xaml"><code class="language-xaml">&lt;HyperlinkButton Content="Microsoft home page" NavigateUri="http://www.microsoft.com"/&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>RepeatButton 提供一个可以按住之后，连续触发的按钮</p>
<pre class="line-numbers language-xaml" data-language="xaml"><code class="language-xaml">&lt;RepeatButton Content="Click and hold" Click="RepeatButton_Click"/&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>ToggleButon 看起来像一个Button，但工作起来像一个CheckBox。它通常有两种状态，但是跟 CheckBox 一样，也是存在三种状态的情况（虽然第三种状态并不是很能看得出来）</p>
<pre class="line-numbers language-xaml" data-language="xaml"><code class="language-xaml">&lt;ToggleButton Content="ToggleButton" Click="Button_Click"/&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>ToggleSwitch 这就表示一个开关，拥有两种状态，可以设置它开启或者关闭时显示的不同内容</p>
<pre class="line-numbers language-xaml" data-language="xaml"><code class="language-xaml">&lt;StackPanel Orientation="Horizontal"&gt;
    &lt;ToggleSwitch OnContent="开启啦" OffContent="关闭咯" FontSize="32" 
                  x:Name="state" IsOn="True"/&gt;
    &lt;ProgressRing IsActive="{Binding ElementName=state, Path=IsOn, Mode=OneWay}" 
                  Width="40"/&gt;
    &lt;!--使用了一个最基本的绑定，之后会提--&gt;
&lt;/StackPanel&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


</li>
</ul>
<h3 id="进度控件"><a href="#进度控件" class="headerlink" title="进度控件"></a>进度控件</h3><ul>
<li><p>Slider 进度条控件，是表示<strong>连续区间数值</strong>的控件</p>
<pre class="line-numbers language-xaml" data-language="xaml"><code class="language-xaml">&lt;Slider Width="200" Minimum="500" Maximum="1000" StepFrequency="10"
        SmallChange="10" LargeChange="100" Value="800" /&gt;
&lt;!--设置进度条最大值、最小值、每次跳转的步数、当前数值以及最大最小变化量--&gt;

&lt;Slider AutomationProperties.Name="Slider with ticks" 
        TickFrequency="10" TickPlacement="Outside" /&gt;
&lt;!--可以设置平均刻度，以及刻度的位置--&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>ProcessRing 加载进度条</p>
<pre class="line-numbers language-xaml" data-language="xaml"><code class="language-xaml">&lt;muxc:ProgressRing IsActive="True" /&gt;

&lt;ProgressRing Width="60" Height="60" Value="0" IsIndeterminate="False"/&gt;
&lt;!--IsIndeterminate 表示进度条是否是不确定的，默认是 true--&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>


</li>
</ul>
<h3 id="文本控件"><a href="#文本控件" class="headerlink" title="文本控件"></a>文本控件</h3><ul>
<li><p>TextBlock 只读文本显示控件，可以使用内联的元素进行各种精确的设定</p>
<pre class="line-numbers language-xaml" data-language="xaml"><code class="language-xaml">&lt;TextBlock Text="I am a TextBlock"/&gt;

&lt;Page.Resources&gt;
    &lt;Style TargetType="TextBlock" x:Key="CustomTextBlockStyle"&gt;
        &lt;Setter Property="FontFamily" Value="Comic Sans MS"/&gt;
        &lt;Setter Property="FontStyle" Value="Italic"/&gt;
    &lt;/Style&gt;
&lt;Page.Resources&gt;
&lt;!--设定基本的 TextBlock 样式--&gt;
&lt;TextBlock Text="I am a styled TextBlock" Style="{StaticResource CustomTextBlockStyle}"/&gt;
    
&lt;TextBlock&gt;
    &lt;Run FontFamily="Times New Roman" Foreground="DarkGray"&gt;
        Text in a TextBlock doesn't have to be a simple string.&lt;/Run&gt;
    &lt;LineBreak/&gt;&lt;!--进行换行--&gt;
    &lt;Span&gt;Text can be &lt;Bold&gt;bold&lt;/Bold&gt;,
	&lt;Italic&gt;italic&lt;/Italic&gt;, or &lt;Underline&gt;underlined&lt;/Underline&gt;. &lt;/Span&gt;
&lt;/TextBlock&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>TextBox TextBox 相当于可编辑的 TextBlock（当然，我们可以使用 IsReadOnly 让它不可编辑）</p>
<pre class="line-numbers language-xaml" data-language="xaml"><code class="language-xaml">&lt;TextBox AutomationProperties.Name="simple TextBox"/&gt;

&lt;TextBox Text="I am super excited to be here!"
    AutomationProperties.Name="customized TextBox" IsReadOnly="True"
    FontFamily="Arial" FontSize="24" FontStyle="Italic"
    CharacterSpacing="200" Foreground="CornflowerBlue" /&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>RichTextBlock 富文本控件，使用 Paragraph 进行分段。如果需要在其中加入控件，需要使用 InlineUIContainer</p>
<pre class="line-numbers language-xaml" data-language="xaml"><code class="language-xaml">&lt;RichTextBlock&gt;
    &lt;Paragraph&gt;
        &lt;InlineUIContainer&gt;
            &lt;Image Source="https://gitee.com/chen-xinyang666/pictures/raw/master/202112211555684.jpg"
            Stretch="Uniform" Width="500" Height="600"/&gt;
        &lt;/InlineUIContainer&gt;
	&lt;/Paragraph&gt;
    &lt;Paragraph&gt;
        &lt;x:String&gt;hello World&lt;/x:String&gt;
        &lt;InlineUIContainer&gt;
        	&lt;TextBlock Text="这只是一个测试，咕咕咕"/&gt;
        &lt;/InlineUIContainer&gt;
    &lt;/Paragraph&gt;
&lt;/RichTextBlock&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


</li>
</ul>
<h3 id="媒体控件"><a href="#媒体控件" class="headerlink" title="媒体控件"></a>媒体控件</h3><ul>
<li><p>image 显示图片的控件。image 控件的伸缩有四种情况：</p>
<ul>
<li>None 按照正常图片大小进行填充</li>
<li>Fill 忽视原图的横纵比，将图片缩放到规定的大小</li>
<li>Uniform 保持图片的横纵比，将图片尽可能地缩放到规定地大小，如果超出则留空</li>
<li>UniformToFill 保持图片地横纵比，将图片通过横纵比进行放大，如果过大，会有超出的部分</li>
</ul>
<pre class="line-numbers language-xaml" data-language="xaml"><code class="language-xaml">&lt;InlineUIContainer&gt;
	&lt;Image Source="https://gitee.com/chen-xinyang666/pictures/raw/master/202112211555684.jpg"
		Stretch="Uniform" Width="500" Height="600"/&gt;
&lt;/InlineUIContainer&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>MediaPlayerElement 媒体播放器，播放视频或者展示图片</p>
<pre class="line-numbers language-xaml" data-language="xaml"><code class="language-xaml">&lt;MediaPlayerElement Source="/Assets/SampleMedia/ladybug.wmv"
                    MaxWidth="400"
                    AutoPlay="False"
                    AreTransportControlsEnabled="True" /&gt;
&lt;!--AreTransportControlsEnabled 是自带的播放控件--&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>WebView 显示对应的网络链接内容</p>
<pre class="line-numbers language-xaml" data-language="xaml"><code class="language-xaml">&lt;WebView Source="https://docs.microsoft.com/en-us/windows/uwp/design/controls-and-patterns/web-view" /&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>


</li>
</ul>
<h3 id="物件集合"><a href="#物件集合" class="headerlink" title="物件集合"></a>物件集合</h3><ul>
<li><p>FlipView 可以将多个图片“打包”成一个整体，拥有自带的前后切换框</p>
<pre class="line-numbers language-xaml" data-language="xaml"><code class="language-xaml">&lt;FlipView MaxWidth="400" Height="270"&gt;
    &lt;Image Source="ms-appx:///Assets/SampleMedia/cliff.jpg" AutomationProperties.Name="Cliff"/&gt;
    &lt;Image Source="ms-appx:///Assets/SampleMedia/grapes.jpg" AutomationProperties.Name="Grapes"/&gt;
    &lt;Image Source="ms-appx:///Assets/SampleMedia/rainier.jpg" AutomationProperties.Name="Rainier"/&gt;
    &lt;Image Source="ms-appx:///Assets/SampleMedia/sunset.jpg" AutomationProperties.Name="Sunset"/&gt;
    &lt;Image Source="ms-appx:///Assets/SampleMedia/valley.jpg" AutomationProperties.Name="Valley"/&gt;
&lt;/FlipView&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>GridView 可以自动排列行和列，如果图片显示超出范围，会进行自动排版</p>
</li>
<li><p>ListView/ListBox ListBox 算是 ListView 的简化版本，可以使用 SelectIndex 和 SelectItem 获取对应选取的元素</p>
<pre class="line-numbers language-xaml" data-language="xaml"><code class="language-xaml">&lt;ListBox ItemsSource="{x:Bind Fonts}" DisplayMemberPath="Item1" 
         SelectedValuePath="Item2" Height="164" Loaded="ListBox2_Loaded"/&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>


</li>
</ul>
<h2 id="0x04-布局"><a href="#0x04-布局" class="headerlink" title="0x04 布局"></a>0x04 布局</h2><ul>
<li><p>Grid 网格布局，可以类比为 Excel 的行和列，在 Grid.RowDefinitions 和 Grid.ColumnDefinitons 中进行定义：</p>
<ul>
<li>默认是<code>*</code>，表示布局的占比</li>
<li>可以设置数据，表示正常的像素</li>
<li>设置 Auto，宽度/高度会根据控件的大小进行调整</li>
</ul>
<p>Grid 可以使用 RowSpan/ColumnSpan 进行“单元格合并”</p>
<pre class="line-numbers language-xaml" data-language="xaml"><code class="language-xaml">&lt;Grid Width="240" Height="120" Background="Gray"&gt;
    &lt;Grid.ColumnDefinitions&gt;
        &lt;ColumnDefinition Width="50" /&gt;
        &lt;ColumnDefinition Width="Auto" /&gt;
        &lt;ColumnDefinition /&gt;
    &lt;/Grid.ColumnDefinitions&gt;
    &lt;Grid.RowDefinitions&gt;
        &lt;RowDefinition Height="50" /&gt;
        &lt;RowDefinition Height="Auto" /&gt;
        &lt;RowDefinition /&gt;
    &lt;/Grid.RowDefinitions&gt;
    &lt;Rectangle Fill="Red" Grid.Column="0" Grid.Row="0" /&gt;
    &lt;Rectangle Fill="Blue" Grid.Row="1" /&gt;
    &lt;Rectangle Fill="Green" Grid.Column="1" /&gt;
    &lt;Rectangle Fill="Yellow" Grid.Row="1" Grid.Column="1" /&gt;
&lt;/Grid&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>StackPanel 将各种物件整合成一行的布局，也是最基本的布局</p>
<pre class="line-numbers language-xaml" data-language="xaml"><code class="language-xaml">&lt;StackPanel Orientation="Vertical"&gt;
    &lt;Rectangle Fill="Red"/&gt;
    &lt;Rectangle Fill="Blue"/&gt;
    &lt;Rectangle Fill="Green"/&gt;
    &lt;Rectangle Fill="Yellow"/&gt;
&lt;/StackPanel&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>ViewBox 限制这个布局中的内容放大或是缩小</p>
<pre class="line-numbers language-xaml" data-language="xaml"><code class="language-xaml">&lt;Viewbox Height="300" Width="300" Stretch="Uniform" StretchDirection="UpOnly"&gt;
    &lt;Border BorderBrush="Gray" BorderThickness="15"&gt;
        &lt;StackPanel Background="DarkGray"&gt;
            &lt;StackPanel Orientation="Horizontal"&gt;
                &lt;Rectangle Fill="Blue" Height="10" Width="40"/&gt;
                &lt;Rectangle Fill="Green" Height="10" Width="40"/&gt;
                &lt;Rectangle Fill="Red" Height="10" Width="40"/&gt;
                &lt;Rectangle Fill="Yellow" Height="10" Width="40"/&gt;
            &lt;/StackPanel&gt;
            &lt;Image Source="ms-appx:///Assets/Slices.png"/&gt;
            &lt;TextBlock Text="This is text." HorizontalAlignment="Center"/&gt;
        &lt;/StackPanel&gt;
    &lt;/Border&gt;
&lt;/Viewbox&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>Canvas 绝对布局控件，可以使用 Canvas.left 等等进行绝对方位的布局。Canvas 还有一个 Z 轴，表示深度</p>
<pre class="line-numbers language-xaml" data-language="xaml"><code class="language-xaml">&lt;Canvas Width="120" Height="120" Background="Gray"&gt;
    &lt;Rectangle Fill="Red" Canvas.Left="0" Canvas.Top="0" Canvas.ZIndex="0" /&gt;
    &lt;Rectangle Fill="Blue" Canvas.Left="20" Canvas.Top="20" Canvas.ZIndex="1" /&gt;
    &lt;Rectangle Fill="Green" Canvas.Left="40" Canvas.Top="40" Canvas.ZIndex="2" /&gt;
    &lt;Rectangle Fill="Yellow" Canvas.Left="60" Canvas.Top="60" Canvas.ZIndex="3" /&gt;
&lt;/Canvas&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


</li>
</ul>
<h2 id="0x05-事件触发"><a href="#0x05-事件触发" class="headerlink" title="0x05 事件触发"></a>0x05 事件触发</h2><h3 id="添加控件"><a href="#添加控件" class="headerlink" title="添加控件"></a>添加控件</h3><ul>
<li><p>XAML 在设计阶段中添加控件，即就是在 xaml 中写下控件代码</p>
</li>
<li><p>C# 在运行中添加各种控件</p>
<pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">Button button = new Button();
button.Content = "mission complete";
grid.Children.Add(button);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><img src="https://gitee.com/chen-xinyang666/pictures/raw/master/202201032135627.png" alt="源码如下，获得面板的子元素的集合"></p>
</li>
</ul>
<h3 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h3><p>事件绑定的函数基本模板 <code>____(object sender, RoutedEventArgs e)</code></p>
<ul>
<li><p>XAML 直接在控件中写，<code>Click="button_name_Click"</code></p>
</li>
<li><p>C# 在初始页面加载时进行绑定 <code>button_name.Click += button_name_Click;</code></p>
<p>这里使用 += 的原因在于，对于这个控件，我们进行事件的绑定是一个委托类型。我们正常来说是应该叠加上去，而不是单纯的用 = 把原有的事件替代掉</p>
</li>
</ul>
<h3 id="页面跳转"><a href="#页面跳转" class="headerlink" title="页面跳转"></a>页面跳转</h3><ul>
<li><p>Frame.Navigate(typeof(Page1)) Page1 是要跳转的页面，根据要跳转的页面进行修改 </p>
</li>
<li><p>Frame.Navigate(typeof(Page1), obj); obj 是要传递的参数，可以变化的 </p>
</li>
<li><p>Frame.GoBack()/Frame.GoForward() 向后/向前</p>
</li>
<li><p>Frame.CanGoBack/Frame.CanGoForward 是否能够向后/向前</p>
</li>
</ul>
<h3 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h3><p>对一些控件值，我们除了硬编码或者通过事件的触发进行更改，我们还可能让其根据某个值进行更改</p>
<ul>
<li>oneWay 在数据源更改之后，对绑定数据进行变更</li>
<li>oneTime 只有在初始化的时候才会进行变更</li>
<li>TwoWay 绑定值的更改同样会作用于数据源</li>
</ul>
<pre class="line-numbers language-xaml" data-language="xaml"><code class="language-xaml">&lt;Slider Width="800" HorizontalAlignment="Center" VerticalAlignment="Center"
        x:Name="slider_value" Maximum="400" Value="50"
        TickFrequency="10" TickPlacement="Inline"&gt;
    &lt;Slider.HeaderTemplate&gt;
        &lt;DataTemplate&gt;
            &lt;StackPanel Orientation="Vertical"&gt;
                &lt;TextBlock Text="Height" FontSize="40"/&gt;
                &lt;TextBlock Text="全体目光向我看齐，嘉然是我爹" FontSize="40"/&gt;
            &lt;/StackPanel&gt;
        &lt;/DataTemplate&gt;
    &lt;/Slider.HeaderTemplate&gt;
&lt;/Slider&gt;
&lt;TextBox Width="400" Grid.Row="1" HorizontalAlignment="Center"
         Height="Auto" FontSize="50"
         VerticalAlignment="Center" x:Name="textBox_value" 
         Text="{Binding ElementName=slider_value, Path=Value, Mode=TwoWay, 
               UpdateSourceTrigger=PropertyChanged}"/&gt;
&lt;!--因为默认是失去焦点之后才会进行更改，这里改成 PropertyChanged--&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="数据模板-样式"><a href="#数据模板-样式" class="headerlink" title="数据模板/样式"></a>数据模板/样式</h3><p>data template/style</p>
<ul>
<li>Inline 内嵌在某一个控件内部</li>
<li>Page resource 定义在页面的 xaml 代码中，紧跟<page>在元素的里面 </page></li>
<li>App resource 定义在 app.xaml 代码中，紧跟在<application>元素的里面 </application></li>
<li>Resource dictionary 定义在单独的文件中，在<resourcedictionary>里面</resourcedictionary></li>
</ul>
<p>x:Name=”” 控件的命名 x:Key=”” 资源的名称</p>
<p>在 Style 中，可以使用 BaseOn 继承之前写的数据样式，可以直接在内部进行重写</p>
<p><img src="https://gitee.com/chen-xinyang666/pictures/raw/master/202201040906429.png" alt="style 样例"></p>
<pre class="line-numbers language-xaml" data-language="xaml"><code class="language-xaml">&lt;Page.Resources&gt;
    &lt;DataTemplate x:Key="ViewNotesDataTemplate"&gt;
        &lt;Grid&gt;
            &lt;TextBlock x:Name="txtNoteTitle" Text="{Binding Title}" FontSize="24" &gt;&lt;/TextBlock&gt;
        &lt;/Grid&gt;
    &lt;/DataTemplate&gt;
&lt;/Page.Resources&gt;

&lt;ListBox x:Name="lstBoxNotes"  ScrollViewer.HorizontalScrollMode="Auto" 
         ScrollViewer.VerticalScrollMode="Auto" 
         ScrollViewer.HorizontalScrollBarVisibility="Auto" 
         ScrollViewer.VerticalScrollBarVisibility="Auto" 
         Margin="279,97,278,97" Width="809"
         ItemTemplate="{StaticResource ViewNotesDataTemplate}"/&gt;
&lt;!--DataTemplate 使用样例。使用 ScrollViewer 显示下拉框--&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="弹出窗体"><a href="#弹出窗体" class="headerlink" title="弹出窗体"></a>弹出窗体</h3><p>注意，MessageDialog、PopupMenu 是在 Windows.UI.Popups 这个包中</p>
<ul>
<li><p>ToolTip 表示一个弹出的消息提示框</p>
<pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">ToolTip tool = new ToolTip();
tool.Content = "click to start";
ToolTipService.SetToolTip(tool, button_name);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li><p>PopupMenu 本质是一个菜单栏，可以类比于 Windows 中的右键菜单</p>
<p><img src="https://gitee.com/chen-xinyang666/pictures/raw/master/202201040932002.png" alt="添加弹出菜单步骤"></p>
<pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">Windows.Ui.Popups.PopupMenu pMenu = new Windows.Ui.Popups.PopupMenu();
UICommand redCommand = new UICommand();
redCommand.Label = "Red";
redCommand.Id = 1;
pMenu.Command.Add(redCommand);
var chosenCommand = await pMenu.ShowForSelectionAsync(
new Rect(e.GetPosition(null)), e.GetPosition(null));
//因为这里的操作是耗时的，所以我们需要使用异步(async)
//await 就像服务员点餐给你菜单一样，程序在这里会进行等待；等待结束就像是告诉服务员餐点好了，程序就继续进行了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://gitee.com/chen-xinyang666/pictures/raw/master/202201040940380.png" alt="各种显示方法"></p>
</li>
</ul>
<h2 id="0x06-文件存储"><a href="#0x06-文件存储" class="headerlink" title="0x06 文件存储"></a>0x06 文件存储</h2><p>每一个通用应用程序默认只有权限访问三个路径（app 安装目录、app data 目录、下载目录），其他的路径如果要访 问的话有两种办法：</p>
<p>（1）在 manifest 文件中声明能力，即增加权限</p>
<p>（2）使用 FilePicker</p>
<p>其中第一种办法适用于常见的知名文件夹，如文档库、视频库、音乐库等，第二种 方法适用于所有的文件夹</p>
<h3 id="使用-FilePicker"><a href="#使用-FilePicker" class="headerlink" title="使用 FilePicker"></a>使用 FilePicker</h3><p>通过使用 FilePicker 来增加文件读取写入的范围</p>
<pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">FileOpenPicker openPicker = new FileOpenPicker()
{
    CommitButtonText = "Open this!",
    ViewMode = PickerViewMode.List,
    SuggestedStartLocation = PickerLocationId.Downloads
};
openPicker.FileTypeFilter.Add(".txt");
StorageFile file = await openPicker.PickSingleFileAsync();
if (file != null)
{
    try
    {
        await new MessageDialog(await FileIO.ReadTextAsync(file)).ShowAsync();
    }
    catch (Exception ex)
    {
        await new MessageDialog(ex.ToString()).ShowAsync();
    }
}

FileSavePicker savePicker = new FileSavePicker()
{
    CommitButtonText = "Save Here!",
    SuggestedFileName = "cxy可爱捏",
};
savePicker.FileTypeChoices.Add("the format we can read", 
                               new[] { ".txt", ".md" });
StorageFile store = await savePicker.PickSaveFileAsync();
if (store != null)
{
    try
    {
        await FileIO.WriteTextAsync(store, "114514");
    }
    catch (Exception ex)
    {
        await new MessageDialog(ex.ToString()).ShowAsync();
    }
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>UWP</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-Boot SpringSecuriry</title>
    <url>/2021/09/23/springboot-aop/</url>
    <content><![CDATA[<h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><h3 id="What-How-Why"><a href="#What-How-Why" class="headerlink" title="What How Why"></a>What How Why</h3><p>面向对象编程（OOP）的好处是显而易见的，缺点也同样明显。当需要为多个不具有继承关系的对象添加一个公共的方法的时候，例如日志记录、性能监控等，如果采用面向对象编程的方法，需要在每个对象里面都添加相同的方法，这样就产生了较大的重复工作量和大量的重复代码，不利于维护。面向切面编程（AOP）是面向对象编程的补充，简单来说就是统一处理某一“切面”的问题的编程思想</p>
<p><img src="https://gitee.com/chen-xinyang666/pictures/raw/master/202109231141874.png" alt="示例图片"></p>
<p>与面向对象的顺序流程不同，AOP采用的是横向切面的方式，注入与主业务流程无关的功能，例如事务管理和日志管理。如果使用AOP的方式进行日志的记录和处理，所有的日志代码都集中于一处，不需要再每个方法里面都去添加，极大减少了重复代码</p>
<h3 id="AOP-专业术语"><a href="#AOP-专业术语" class="headerlink" title="AOP 专业术语"></a>AOP 专业术语</h3><p><strong>通知</strong>（Advice）包含了需要用于多个应用对象的横切行为，完全听不懂，没关系，通俗一点说就是定义了“什么时候”和“做什么”</p>
<p><strong>连接点</strong>（Join Point）是程序执行过程中能够应用通知的所有点</p>
<p><strong>切点</strong>（Poincut）是定义了在“什么地方”进行切入，哪些连接点会得到通知。显然，切点一定是连接点</p>
<p><strong>切面</strong>（Aspect）是通知和切点的结合。通知和切点共同定义了切面的全部内容——是什么，何时，何地完成功能</p>
<p><strong>引入</strong>（Introduction）允许我们向现有的类中添加新方法或者属性</p>
<p><strong>织入</strong>（Weaving）是把切面应用到目标对象并创建新的代理对象的过程，分为编译期织入、类加载期织入和运行期织入</p>
<p><img src="https://gitee.com/chen-xinyang666/pictures/raw/master/202109231146717.png" alt="示例图片"></p>
<h3 id="Spring-Boot-中使用-AOP"><a href="#Spring-Boot-中使用-AOP" class="headerlink" title="Spring-Boot 中使用 AOP"></a>Spring-Boot 中使用 AOP</h3><h4 id="定义切面和切点"><a href="#定义切面和切点" class="headerlink" title="定义切面和切点"></a>定义切面和切点</h4><p>Spring 采用 @Aspect 注解对 POJO 进行标注，该注解表明该类不仅仅是一个 POJO，还是一个切面。切面是切点和通知的结合，那么定义一个切面就需要编写切点和通知。在代码中，只需要添加 @Aspect 注解即可</p>
<p>切点是通过@Pointcut注解和切点表达式定义的。</p>
<p>@Pointcut注解可以在一个切面内定义可重用的切点</p>
<p>由于Spring切面粒度最小是达到方法级别，而execution表达式可以用于明确指定方法返回类型，类名，方法名和参数名等与方法相关的部件，并且实际中，大部分需要使用AOP的业务场景也只需要达到方法级别即可，因而execution表达式的使用是最为广泛的。如图是execution表达式的语法：</p>
<p>execution表示在方法执行的时候触发。以 <code>*</code> 开头，表明方法返回值类型为任意类型。然后是全限定的类名和方法名，<code>*</code> 可以表示任意类和任意方法。对于方法参数列表，可以使用“..”表示参数为任意类型。如果需要多个表达式，可以使用“&amp;&amp;”、“||”和“!”完成与、或、非的操作</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">execution</span><span class="token punctuation">(</span> 方法修饰符 返回类型 方法所属的包<span class="token punctuation">.</span>类名<span class="token punctuation">.</span>方法名称<span class="token punctuation">(</span>方法参数<span class="token punctuation">)</span> <span class="token punctuation">)</span>  
  <span class="token string">"*"</span>表示不限     <span class="token string">".."</span>表示参数不限
  方法修饰符不写表示不限，不用<span class="token string">"*"</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><img src="https://gitee.com/chen-xinyang666/pictures/raw/master/202109231157371.png" alt="图片示例"></p>
<h4 id="使用通知"><a href="#使用通知" class="headerlink" title="使用通知"></a>使用通知</h4><p>通知有五种类型，分别是：</p>
<p>前置通知（@Before）：在目标方法调用之前调用通知</p>
<p>后置通知（@After）：在目标方法完成之后调用通知</p>
<p>环绕通知（@Around）：在被通知的方法调用之前和调用之后执行自定义的方法</p>
<p>返回通知（@AfterReturning）：在目标方法成功执行之后调用通知</p>
<p>异常通知（@AfterThrowing）：在目标方法抛出异常之后调用通知</p>
<h4 id="简单例子"><a href="#简单例子" class="headerlink" title="简单例子"></a>简单例子</h4><p>首先是简单写几个控制器，方便我们之后随机进行测试</p>
<p>写了一个带传递的参数是为了方面之后的切面中的演示，下面对日志功能进行简单演示</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PathVariable</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello, World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/hello/{name}"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">sayLove</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Activate Successfully"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"i love you "</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>首先定义切入点，切入点的位置定好之后之后便可使用注释将对应的通知插入</p>
<p>这里使用 @Slf4j 的注释，使用日志（这里使用夏佬的例子进行简单的说明）</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span></span><span class="token class-name">ObjectMapper</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">ProceedingJoinPoint</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Aspect</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AopAdvice</span> <span class="token punctuation">{</span>
    <span class="token comment">//表示实体类中所有的方法</span>
    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* com.example.demo.controller.*.*(..))"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">MyPointCut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"MyPointCut()"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">BeforeAdvice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"this is before"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">"MyPointCut()"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">AfterAdvice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"this is after"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"MyPointCut()"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token class-name">AroundAdvice</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> proceedingJoinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> methodName <span class="token operator">=</span> proceedingJoinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> className <span class="token operator">=</span> proceedingJoinPoint<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ObjectMapper</span> objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> proceedingJoinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取其中的参数</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"调用前:"</span> <span class="token operator">+</span> className <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> methodName <span class="token operator">+</span> <span class="token string">" args="</span> <span class="token operator">+</span> objectMapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> object <span class="token operator">=</span> proceedingJoinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//对应事件开始处理，这里需要抛出异常</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"调用后:"</span> <span class="token operator">+</span> className <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> methodName <span class="token operator">+</span> <span class="token string">" args="</span> <span class="token operator">+</span> objectMapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> object<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://gitee.com/chen-xinyang666/pictures/raw/master/202109231411633.png" alt="调用 /hello"></p>
<p><img src="https://gitee.com/chen-xinyang666/pictures/raw/master/202109231414100.png" alt="调用 /hello/cxy"></p>
<h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><p>在前后端的交互中，需要有状态码的存在，在有些时候我们甚至需要自定义一些状态码</p>
<p>首先创建一个包含我们自定义状态码的枚举。为什么是枚举而不是类？因为枚举类型设置好属性之后就可以直接往里面添加我们需要的实例，之后如果有什么其他需求，直接添加即可</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">AllArgsConstructor</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * @program: demo
 * @author: cxy621
 * @create: 2021-09-23 15:35
 **/</span>
<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">ResultCode</span> <span class="token punctuation">{</span>
    <span class="token function">SUCCESS</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"成功"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token comment">//用户错误</span>
    <span class="token function">USER_LOGIN_FAILED</span><span class="token punctuation">(</span><span class="token number">4000</span><span class="token punctuation">,</span> <span class="token string">"登录失败"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">USER_NOT_LOGIN</span><span class="token punctuation">(</span><span class="token number">4001</span><span class="token punctuation">,</span> <span class="token string">"用户未登录"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">USER_CREDENTIALS_ERROR</span><span class="token punctuation">(</span><span class="token number">4002</span><span class="token punctuation">,</span> <span class="token string">"密码错误"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">USER_ACCOUNT_NOT_EXIST</span><span class="token punctuation">(</span><span class="token number">4003</span><span class="token punctuation">,</span> <span class="token string">"账号不存在"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">USER_NO_PERMISSION</span><span class="token punctuation">(</span><span class="token number">4004</span><span class="token punctuation">,</span> <span class="token string">"权限不足"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">USER_SESSION_INVALID</span><span class="token punctuation">(</span><span class="token number">4005</span><span class="token punctuation">,</span> <span class="token string">"登录超时"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">USER_ACCOUNT_USED_BY_OTHERS</span><span class="token punctuation">(</span><span class="token number">4006</span><span class="token punctuation">,</span> <span class="token string">"账户在第三方登录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> code<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> message<span class="token punctuation">;</span>

    <span class="token class-name">ResultCode</span><span class="token punctuation">(</span><span class="token keyword">int</span> code<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> code<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCode</span><span class="token punctuation">(</span><span class="token keyword">int</span> code<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> message<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>之后我们再进行返回码的格式进行设置，这个时候我们需要使用工具类 <code>Result&lt;T&gt;</code></p>
<p>通过这个通用返回类型类，我们就可以实现返回数据携带状态码的功能</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">AllArgsConstructor</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">NoArgsConstructor</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * @program: demo
 * @author: cxy621
 * @create: 2021-09-23 15:38
 **/</span>
<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> success<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> code<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> message<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">T</span> data<span class="token punctuation">;</span>

    <span class="token comment">//成功时返回成功的状态码和数据</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">success</span><span class="token punctuation">(</span><span class="token class-name">T</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token class-name">ResultCode</span><span class="token punctuation">.</span>SUCCESS<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">ResultCode</span><span class="token punctuation">.</span>SUCCESS<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
	
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">failure</span><span class="token punctuation">(</span><span class="token class-name">ResultCode</span> resultCode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> resultCode<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> resultCode<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在这之后，我们需要写一个异常类，通过它来继承 RuntimeException，实现我们新创建的状态码的调用</p>
<p>其实就是一个简单的重载，写一个工具类之后我们之后就可以直接使用了</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * @program: demo
 * @author: cxy621
 * @create: 2021-09-23 20:33
 **/</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LocalRuntimeException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">ResultCode</span> resultCode<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">LocalRuntimeException</span><span class="token punctuation">(</span><span class="token class-name">ResultCode</span> resultCode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>resultCode <span class="token operator">=</span> resultCode<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">LocalRuntimeException</span><span class="token punctuation">(</span><span class="token class-name">ResultCode</span> resultCode<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>resultCode <span class="token operator">=</span> resultCode<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">ResultCode</span> <span class="token function">getResultCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> resultCode<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">LocalRuntimeException</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> cause<span class="token punctuation">,</span> <span class="token class-name">ResultCode</span> resultCode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> cause<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>resultCode <span class="token operator">=</span> resultCode<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="SpringSecurity"><a href="#SpringSecurity" class="headerlink" title="SpringSecurity"></a>SpringSecurity</h2><p>在不断地对 Spring-Boot 的深入学习中，我们逐渐需要使用一些安全框架，保证项目的稳定性</p>
<p>其中，最关键的就是对权限的管控了，主要就是授权和鉴权，这里我们使用夏老的例子进行学习</p>
<h3 id="SpringSecurity-身份验证流程"><a href="#SpringSecurity-身份验证流程" class="headerlink" title="SpringSecurity 身份验证流程"></a>SpringSecurity 身份验证流程</h3><ol>
<li><p>用户名和密码被过滤器获取到，封装成 Authentication,通常情况下是 UsernamePasswordAuthenticationToken 这个实现类</p>
</li>
<li><p>AuthenticationManager 身份管理器负责验证这个Authentication</p>
</li>
<li><p>认证成功后，AuthenticationManager 身份管理器返回一个被填充满了信息的（包括上面提到的权限信息，身份信息，细节信息，但密码通常会被移除）Authentication 实例</p>
</li>
<li><p>SecurityContextHolder 安全上下文容器将第3步填充了信息的 Authentication，通过SecurityContextHolder.getContext().setAuthentication() 方法，设置到其中</p>
</li>
</ol>
<h3 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h3><p>授权部分的内容就是给予一个用户细节和密码，这些在源码中有自带方法</p>
<p>通过这些方法，Spring-Boot 能够拿到用户的信息</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> <span class="token class-name">UserDetailsService</span> userDetailsService<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> <span class="token class-name">PasswordEncoder</span> passwordEncoder<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">PasswordEncoder</span> <span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//通过指数的方式将密码进行散列，源码中有很多种方式，这里使用默认的即可</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Override</span>
<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">AuthenticationManagerBuilder</span> auth<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
	<span class="token comment">//进行授权认证</span>
	auth<span class="token punctuation">.</span><span class="token function">userDetailsService</span><span class="token punctuation">(</span>userDetailsService<span class="token punctuation">)</span>
		<span class="token punctuation">.</span><span class="token function">passwordEncoder</span><span class="token punctuation">(</span>passwordEncoder<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//userDetailsService 进行身份认证 passwordEncoder 对用户的密码进行加盐加密</span>
    <span class="token comment">//授权使用这两个方法，完成对用户的身份和密码进行授权</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="鉴权"><a href="#鉴权" class="headerlink" title="鉴权"></a>鉴权</h3><h4 id="处理-json-数据"><a href="#处理-json-数据" class="headerlink" title="处理 json 数据"></a>处理 json 数据</h4><p>很多时候，我们往往想要自己定义 Security 中的各种处理器，所以我们需要自己写几个</p>
<p>因此，我们需要使用 ObjectMapper 来读取写入 json 数据，然后让所有类都继承这个类，调用公共方法</p>
<p>在这之中我们需要使用 Servlet。Servlet 是服务 HTTP 请求并实现 <strong>javax.servlet.Servlet</strong> 接口的 Java 类。Web 应用程序开发人员通常编写 Servlet 来扩展 javax.servlet.http.HttpServlet，并实现 Servlet 接口的抽象类专门用来处理 HTTP 请求（果然是越学发现自己不会的越多，之后会开博客学习 Servlet）</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span></span><span class="token class-name">ObjectMapper</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * @program: demo
 * @author: cxy621
 * @create: 2021-09-23 23:19
 **/</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JsonAuthentication</span> <span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token class-name">JsonWrite</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> data<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">//将 json 数据类型转为 String</span>
        <span class="token class-name">String</span> json <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//设置响应的内容类型</span>
        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/json;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//使用 getWriter() 返回一个 PrintWriter 类型，再使用 writer 给客户端 json 数据</span>
        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="自定义处理器"><a href="#自定义处理器" class="headerlink" title="自定义处理器"></a>自定义处理器</h4><h5 id="登陆成功处理器"><a href="#登陆成功处理器" class="headerlink" title="登陆成功处理器"></a>登陆成功处理器</h5><p>SecurityContextHolder 它持有的是安全上下文（security context）的信息。当前操作的用户是谁，该用户是否已经被认证，他拥有哪些角色权等等，这些都被保存在 SecurityContextHolder 中。SecurityContextHolder 默认使用 ThreadLocal 策略来存储认证信息。看 ThreadLocal 也就意味着，这是一种与线程绑定的策略。在 web 环境下，Spring Security 在用户登录时自动绑定认证信息到当前线程，在用户退出时，自动清除当前线程的认证信息</p>
<ol>
<li><p>Authentication 是 spring security 包中的接口，直接继承自 Principal 类，而 Principal 是位于 java.security 包中的。可以见得，Authentication 在 spring security 中是最高级别的身份/认证的抽象</p>
</li>
<li><p>由这个顶级接口，我们可以得到用户拥有的权限信息列表，密码，用户细节信息，用户身份信息，认证信息。</p>
</li>
<li><p>getAuthorities()，权限信息列表，默认是 GrantedAuthority 接口的一些实现类，通常是代表权限信息的一系列字符串。</p>
</li>
<li><p>getCredentials()，密码信息，用户输入的密码字符串，在认证过后通常会被移除，用于保障安全。</p>
</li>
<li><p>getDetails()，细节信息，web应用中的实现接口通常为 WebAuthenticationDetails，它记录了访问者的 ip 地址和 sessionId 的值。</p>
</li>
<li><p>getPrincipal()，敲黑板！！！最重要的身份信息，大部分情况下返回的是 UserDetails 接口的实现类，也是框架中的常用接口之一。</p>
</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">AccountRole</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>until<span class="token punctuation">.</span></span><span class="token class-name">Result</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">Authentication</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SecurityContextHolder</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>userdetails<span class="token punctuation">.</span></span><span class="token class-name">User</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>web<span class="token punctuation">.</span>authentication<span class="token punctuation">.</span></span><span class="token class-name">AuthenticationSuccessHandler</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * @program: demo
 * @author: cxy621
 * @create: 2021-09-23 23:36
 **/</span>
<span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"authenticationSuccessHandler"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAuthenticationSuccessHandler</span> <span class="token keyword">extends</span> <span class="token class-name">JsonAuthentication</span> <span class="token keyword">implements</span> <span class="token class-name">AuthenticationSuccessHandler</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAuthenticationSuccess</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> httpServletRequest<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> httpServletResponse<span class="token punctuation">,</span> <span class="token class-name">Authentication</span> authentication<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
        <span class="token comment">//在带有用户名和密码的身份验证请求的情况下,获取用户名</span>
        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//getAuthorities() 一般都是获得权限信息，这里的权限信息就是 role。将获得批准的信息的权限信息添加到 list 中</span>
        user<span class="token punctuation">.</span><span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>grantedAuthority <span class="token operator">-&gt;</span> list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>grantedAuthority<span class="token punctuation">.</span><span class="token function">getAuthority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">AccountRole</span> accountRole <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AccountRole</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AccountRole</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>accountRole<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token namespace">this<span class="token punctuation">.</span></span>JsonWrite</span><span class="token punctuation">(</span>httpServletRequest<span class="token punctuation">,</span> httpServletResponse<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="登录失败处理器"><a href="#登录失败处理器" class="headerlink" title="登录失败处理器"></a>登录失败处理器</h5><p>登录失败就不断判断错误的原因，因为我们已经将状态码提前设置好，只需要判断 e 的类型即可</p>
<p>从密码错误开始 <code>BadCredentialsException</code>，再到用户名不存在 <code>InternalAuthenticationServiceException</code>，如果两者都没有对应的情况，那么就判定为登陆失败</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>until<span class="token punctuation">.</span></span><span class="token class-name">Result</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>until<span class="token punctuation">.</span></span><span class="token class-name">ResultCode</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>authentication<span class="token punctuation">.</span></span><span class="token class-name">BadCredentialsException</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>authentication<span class="token punctuation">.</span></span><span class="token class-name">InternalAuthenticationServiceException</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">AuthenticationException</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>web<span class="token punctuation">.</span>authentication<span class="token punctuation">.</span></span><span class="token class-name">AuthenticationFailureHandler</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * @program: demo
 * @author: cxy621
 * @create: 2021-09-24 10:03
 **/</span>
<span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"authenticationFailureHandler"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAuthenticationFailureHandler</span> <span class="token keyword">extends</span> <span class="token class-name">JsonAuthentication</span> <span class="token keyword">implements</span> <span class="token class-name">AuthenticationFailureHandler</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAuthenticationFailure</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> httpServletRequest<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> httpServletResponse<span class="token punctuation">,</span> <span class="token class-name">AuthenticationException</span> e<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Result</span> result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token comment">//instance of 判断 e 的类型</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">BadCredentialsException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//身份认证失败错误</span>
            result <span class="token operator">=</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">failure</span><span class="token punctuation">(</span><span class="token class-name">ResultCode</span><span class="token punctuation">.</span>USER_CREDENTIALS_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">InternalAuthenticationServiceException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//处理范围更大的错误</span>
            result <span class="token operator">=</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">failure</span><span class="token punctuation">(</span><span class="token class-name">ResultCode</span><span class="token punctuation">.</span>USER_ACCOUNT_NOT_EXIST<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            result <span class="token operator">=</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">failure</span><span class="token punctuation">(</span><span class="token class-name">ResultCode</span><span class="token punctuation">.</span>USER_LOGIN_FAILED<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name"><span class="token namespace">this<span class="token punctuation">.</span></span>JsonWrite</span><span class="token punctuation">(</span>httpServletRequest<span class="token punctuation">,</span> httpServletResponse<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="登出处理器-amp-登出成功处理器"><a href="#登出处理器-amp-登出成功处理器" class="headerlink" title="登出处理器&amp;登出成功处理器"></a>登出处理器&amp;登出成功处理器</h5><p>这里需要定义两个，一个是执行登出操作执行的操作（就是去除 <code>SecurityContextHolder</code> 储存的用户信息）</p>
<p>登出成功处理器，只需要返回自定义好的成功状态码即可</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">Authentication</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SecurityContextHolder</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>web<span class="token punctuation">.</span>authentication<span class="token punctuation">.</span>logout<span class="token punctuation">.</span></span><span class="token class-name">LogoutHandler</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * @program: demo
 * @author: cxy621
 * @create: 2021-09-24 10:37
 **/</span>
<span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"logoutHandler"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyLogoutHandler</span> <span class="token keyword">implements</span> <span class="token class-name">LogoutHandler</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">logout</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> httpServletRequest<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> httpServletResponse<span class="token punctuation">,</span> <span class="token class-name">Authentication</span> authentication<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">clearContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//清楚储存的内容</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>until<span class="token punctuation">.</span></span><span class="token class-name">Result</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>until<span class="token punctuation">.</span></span><span class="token class-name">ResultCode</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">Authentication</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>web<span class="token punctuation">.</span>authentication<span class="token punctuation">.</span>logout<span class="token punctuation">.</span></span><span class="token class-name">LogoutSuccessHandler</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * @program: demo
 * @author: cxy621
 * @create: 2021-09-24 10:44
 **/</span>
<span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"logoutSuccessHandler"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyLogoutSuccessHandler</span> <span class="token keyword">extends</span> <span class="token class-name">JsonAuthentication</span> <span class="token keyword">implements</span> <span class="token class-name">LogoutSuccessHandler</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onLogoutSuccess</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> httpServletRequest<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> httpServletResponse<span class="token punctuation">,</span> <span class="token class-name">Authentication</span> authentication<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Result</span> result <span class="token operator">=</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token class-name">ResultCode</span><span class="token punctuation">.</span>SUCCESS<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token namespace">this<span class="token punctuation">.</span></span>JsonWrite</span><span class="token punctuation">(</span>httpServletRequest<span class="token punctuation">,</span> httpServletResponse<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="无权限处理器"><a href="#无权限处理器" class="headerlink" title="无权限处理器"></a>无权限处理器</h5><p>这个比较简单，主要判断用户是否有对应给予的权限来登录对应的页面</p>
<p>但是要注意的是，原来默认的方法是可以使用重定向的，即设置一个 ErrorPage，发生权限错误便会跳转到对应页面。这里使用自定义的处理器，返回的是用户无权限的错误状态码</p>
<p><img src="https://gitee.com/chen-xinyang666/pictures/raw/master/202109241530405.png" alt="源码示例"></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>until<span class="token punctuation">.</span></span><span class="token class-name">Result</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>until<span class="token punctuation">.</span></span><span class="token class-name">ResultCode</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>access<span class="token punctuation">.</span></span><span class="token class-name">AccessDeniedException</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>web<span class="token punctuation">.</span>access<span class="token punctuation">.</span></span><span class="token class-name">AccessDeniedHandler</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * @program: demo
 * @author: cxy621
 * @create: 2021-09-24 10:32
 **/</span>
<span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"accessDeniedHandler"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAccessDeniedHandler</span> <span class="token keyword">extends</span> <span class="token class-name">JsonAuthentication</span> <span class="token keyword">implements</span> <span class="token class-name">AccessDeniedHandler</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> httpServletRequest<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> httpServletResponse<span class="token punctuation">,</span> <span class="token class-name">AccessDeniedException</span> e<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Result</span> result <span class="token operator">=</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">failure</span><span class="token punctuation">(</span><span class="token class-name">ResultCode</span><span class="token punctuation">.</span>USER_NO_PERMISSION<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token namespace">this<span class="token punctuation">.</span></span>JsonWrite</span><span class="token punctuation">(</span>httpServletRequest<span class="token punctuation">,</span> httpServletResponse<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="第三方登录处理器"><a href="#第三方登录处理器" class="headerlink" title="第三方登录处理器"></a>第三方登录处理器</h5><p>这个处理器主要是针对第三方登录时候的一个问题，在默认的源码中我们可以直接看到是给提示信息了</p>
<p>我们自定义处理器中就使用自定义的报错信息即可</p>
<p><img src="https://gitee.com/chen-xinyang666/pictures/raw/master/202109241118288.png" alt="源码示例"></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>until<span class="token punctuation">.</span></span><span class="token class-name">Result</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>until<span class="token punctuation">.</span></span><span class="token class-name">ResultCode</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>web<span class="token punctuation">.</span>session<span class="token punctuation">.</span></span><span class="token class-name">SessionInformationExpiredEvent</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>web<span class="token punctuation">.</span>session<span class="token punctuation">.</span></span><span class="token class-name">SessionInformationExpiredStrategy</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * @program: demo
 * @author: cxy621
 * @create: 2021-09-24 11:16
 **/</span>
<span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"sessionInformationExpiredStrategy"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MySessionInformationExpiredStrategy</span> <span class="token keyword">extends</span> <span class="token class-name">JsonAuthentication</span> <span class="token keyword">implements</span> <span class="token class-name">SessionInformationExpiredStrategy</span> <span class="token punctuation">{</span>
    <span class="token comment">//处理第三方登陆问题，原本的默认的可以直接去看源码，这里重写表示这个账号已经有人在登陆了</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onExpiredSessionDetected</span><span class="token punctuation">(</span><span class="token class-name">SessionInformationExpiredEvent</span> event<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Result</span> result <span class="token operator">=</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">failure</span><span class="token punctuation">(</span><span class="token class-name">ResultCode</span><span class="token punctuation">.</span>USER_ACCOUNT_USED_BY_OTHERS<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token namespace">this<span class="token punctuation">.</span></span>JsonWrite</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="错误-url-处理器"><a href="#错误-url-处理器" class="headerlink" title="错误 url 处理器"></a>错误 url 处理器</h5><p>在我们的客户“不小心”使用错误的 url 的时候，框架中默认的方法会对其进行重定向</p>
<p>在我们自定义的处理器中，我们就抛出错误，返回<code>登录超时</code></p>
<p><img src="https://gitee.com/chen-xinyang666/pictures/raw/master/202109241615031.png" alt="源代码示例"></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>until<span class="token punctuation">.</span></span><span class="token class-name">Result</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>until<span class="token punctuation">.</span></span><span class="token class-name">ResultCode</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>web<span class="token punctuation">.</span>session<span class="token punctuation">.</span></span><span class="token class-name">InvalidSessionStrategy</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * @program: demo
 * @author: cxy621
 * @create: 2021-09-24 11:11
 **/</span>
<span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"invalidSessionStrategy"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyInvalidSessionStrategy</span> <span class="token keyword">extends</span> <span class="token class-name">JsonAuthentication</span> <span class="token keyword">implements</span> <span class="token class-name">InvalidSessionStrategy</span> <span class="token punctuation">{</span>
    <span class="token comment">//在默认检测到无效 url 时会执行重定向，这里自己写了处理器之后就报登录超时错误</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onInvalidSessionDetected</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Result</span> result <span class="token operator">=</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">failure</span><span class="token punctuation">(</span><span class="token class-name">ResultCode</span><span class="token punctuation">.</span>USER_SESSION_INVALID<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token namespace">this<span class="token punctuation">.</span></span>JsonWrite</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="整体设置"><a href="#整体设置" class="headerlink" title="整体设置"></a>整体设置</h3><p>在设置好所有的处理器之后，我们就可以开始进行 SpringSecurity 的配置了</p>
<p>授权部分上面已经提到了，就不再多说。鉴权的设置中，首先是使用 <code>authorizeRequests()</code> 开启认证请求。之后我们可以使用 <code>antMatchers</code> 指定对应 url 由什么人来访问，一般登录注册界面都会使用 <code>permitAll()</code> 允许所有人访问。之后就是设置各种处理器的事情，如果登录成功失败处理器，登出处理器等等</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>authentication<span class="token punctuation">.</span>builders<span class="token punctuation">.</span></span><span class="token class-name">AuthenticationManagerBuilder</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>method<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span></span><span class="token class-name">EnableGlobalMethodSecurity</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>web<span class="token punctuation">.</span>builders<span class="token punctuation">.</span></span><span class="token class-name">HttpSecurity</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>web<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span></span><span class="token class-name">EnableWebSecurity</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>web<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span></span><span class="token class-name">WebSecurityConfigurerAdapter</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>userdetails<span class="token punctuation">.</span></span><span class="token class-name">UserDetailsService</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>bcrypt<span class="token punctuation">.</span></span><span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>password<span class="token punctuation">.</span></span><span class="token class-name">PasswordEncoder</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>web<span class="token punctuation">.</span></span><span class="token class-name">AuthenticationEntryPoint</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>web<span class="token punctuation">.</span>access<span class="token punctuation">.</span></span><span class="token class-name">AccessDeniedHandler</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>web<span class="token punctuation">.</span>authentication<span class="token punctuation">.</span></span><span class="token class-name">AuthenticationFailureHandler</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>web<span class="token punctuation">.</span>authentication<span class="token punctuation">.</span></span><span class="token class-name">AuthenticationSuccessHandler</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>web<span class="token punctuation">.</span>authentication<span class="token punctuation">.</span>logout<span class="token punctuation">.</span></span><span class="token class-name">LogoutHandler</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>web<span class="token punctuation">.</span>authentication<span class="token punctuation">.</span>logout<span class="token punctuation">.</span></span><span class="token class-name">LogoutSuccessHandler</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>web<span class="token punctuation">.</span>session<span class="token punctuation">.</span></span><span class="token class-name">InvalidSessionStrategy</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>web<span class="token punctuation">.</span>session<span class="token punctuation">.</span></span><span class="token class-name">SessionInformationExpiredStrategy</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * @program: demo
 * @author: cxy621
 * @create: 2021-09-23 21:59
 **/</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableWebSecurity</span><span class="token comment">//开启对 Security 调试的支持，默认为 false</span>
<span class="token annotation punctuation">@EnableGlobalMethodSecurity</span><span class="token punctuation">(</span>prePostEnabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token comment">//开启基于方法的安全认证机制，也就是说在 web 层的 controller 启用注解机制的安全确认</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">UserDetailsService</span> userDetailsService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">PasswordEncoder</span> passwordEncoder<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">AuthenticationSuccessHandler</span> authenticationSuccessHandler<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">AuthenticationFailureHandler</span> authenticationFailureHandler<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">AuthenticationEntryPoint</span> authenticationEntryPoint<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">AccessDeniedHandler</span> accessDeniedHandler<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">LogoutHandler</span> logoutHandler<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">LogoutSuccessHandler</span> logoutSuccessHandler<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">InvalidSessionStrategy</span> invalidSessionStrategy<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">SessionInformationExpiredStrategy</span> sessionInformationExpiredStrategy<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">PasswordEncoder</span> <span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//通过指数的方式将密码进行散列</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">AuthenticationManagerBuilder</span> auth<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">//进行授权认证</span>
        auth<span class="token punctuation">.</span><span class="token function">userDetailsService</span><span class="token punctuation">(</span>userDetailsService<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">passwordEncoder</span><span class="token punctuation">(</span>passwordEncoder<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//userDetailsService 进行身份认证 passwordEncoder 对用户的密码进行加盐加密</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        http<span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//开启认证请求</span>
                <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/register"</span><span class="token punctuation">,</span> <span class="token string">"/login"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//任何身份都可以访问该页面</span>
                <span class="token comment">//指定任何经过身份验证的用户都允许使用 URL,任何 URL 都需要一个身份</span>
                <span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token comment">//使用spring security 自带的form登录，不用手写login的接口了</span>
                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token comment">//登陆失败登录成功的接口</span>
                <span class="token punctuation">.</span><span class="token function">successHandler</span><span class="token punctuation">(</span>authenticationSuccessHandler<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">failureHandler</span><span class="token punctuation">(</span>authenticationFailureHandler<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">logoutUrl</span><span class="token punctuation">(</span><span class="token string">"/logout"</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">addLogoutHandler</span><span class="token punctuation">(</span>logoutHandler<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">logoutSuccessHandler</span><span class="token punctuation">(</span>logoutSuccessHandler<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">deleteCookies</span><span class="token punctuation">(</span><span class="token string">"JSESSIONID"</span><span class="token punctuation">)</span>
                <span class="token comment">//添加发生错误时的处理器，一个是权限问题，还有一个是登录问题</span>
                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exceptionHandling</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">authenticationEntryPoint</span><span class="token punctuation">(</span>authenticationEntryPoint<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">accessDeniedHandler</span><span class="token punctuation">(</span>accessDeniedHandler<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sessionManagement</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token comment">//session过期处理</span>
                <span class="token punctuation">.</span><span class="token function">invalidSessionStrategy</span><span class="token punctuation">(</span>invalidSessionStrategy<span class="token punctuation">)</span>
                <span class="token comment">//最大允许登录数量</span>
                <span class="token punctuation">.</span><span class="token function">maximumSessions</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
                <span class="token comment">//已登录时是否禁止其他登录，这部分设置主要是对第三方登录进行设置</span>
                <span class="token punctuation">.</span><span class="token function">maxSessionsPreventsLogin</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">expiredSessionStrategy</span><span class="token punctuation">(</span>sessionInformationExpiredStrategy<span class="token punctuation">)</span><span class="token punctuation">;</span>
        http<span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring-Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 授课讲义</title>
    <url>/2021/12/06/mysql-bi-zhi-bi-hui/</url>
    <content><![CDATA[<h2 id="0x00-写在前面"><a href="#0x00-写在前面" class="headerlink" title="0x00 写在前面"></a>0x00 写在前面</h2><p>​    前四节课分别由我们Java组的组长、后端可靠大哥哥和协草带我们初识Java SE。这次由我带大家入门MySQL的基础，这节课我们主要讲一些MySQL的基本语法和CRUD（Creating、Retrieving、Updating、Deleting）。之后一些具体的东西还希望大家课后自己复习和掌握，具体的学习网站和推荐书籍会放在课件的最后。</p>
<h2 id="0x01-引入"><a href="#0x01-引入" class="headerlink" title="0x01 引入"></a>0x01 引入</h2><p>​    说到数据库，其实就可以说到前后端的本质问题。后端的本质其实就是对数据库进行“CRUD”，其他的东西都是让我们更好的“CRUD”。前端的本质也就是把后端传递的数据库信息显示出来，把数据传给后端。 </p>
<p><img src="https://gitee.com/chen-xinyang666/pictures/raw/master/202112071451224.jpeg" alt="前后端交互图"></p>
<h3 id="1-什么是数据库"><a href="#1-什么是数据库" class="headerlink" title="1.什么是数据库"></a>1.什么是数据库</h3><p>​    数据库（DB DataBase），顾名思义就是存储数据和管理数据的东西。在数据库之前，其实有很多东西都是作为存储数据的媒介，比如Excel，txt，io流，甚至是存储在变量中。数据库是数据仓库，它是一个软件，安装在操作系统之上（Windows、Linux、MacOs）。可以存储大量的数据，500万以下都没有什么问题，超过500万可能需要做一些索引优化。</p>
<h3 id="2-为什么使用数据库"><a href="#2-为什么使用数据库" class="headerlink" title="2.为什么使用数据库"></a>2.为什么使用数据库</h3><ul>
<li><p>数据库可以结构化存储大量的数据信息，方便用户进行有效的检索和访问。<br>数据库可以对数据进行分类保存，并且能够提供快速的查询。例如，我们平时使用百度搜索内容时，百度也是基于数据库和数据分类技术来达到快速搜索的目的。</p>
</li>
<li><p>数据库可以有效地保持数据信息的一致性、完整性、降低数据冗余。</p>
</li>
<li><p>数据库可以满足应用的共享和安全方面的要求，把数据放在数据库中在很多情况下也是出于安全的考虑。<br>例如，如果把所有员工信息和工资数据都放在磁盘文件上，则工资的保密性就无从谈起。如果把员工信息和工资数据放在数据库中，就可以只允许查询和修改员工信息，而工资信息只允许指定人（如财务人员）查看，从而保证数据的安全性。</p>
</li>
<li><p>数据库技术能够方便智能化地分析，产生新的有用信息</p>
</li>
</ul>
<h3 id="3-DBMS分类"><a href="#3-DBMS分类" class="headerlink" title="3.DBMS分类"></a>3.DBMS分类</h3><p>​    DBMS即数据库管理系统（Database Management System），是操作和管理数据库的软件，用于建立、使用和维护数据库。</p>
<p>​    我们最为熟知的MySQL就是典型的关系型数据库管理系统</p>
<h4 id="a-关系型数据库管理系统：（SQL）"><a href="#a-关系型数据库管理系统：（SQL）" class="headerlink" title="a.关系型数据库管理系统：（SQL）"></a>a.关系型数据库管理系统：（SQL）</h4><p>​    关系型数据库是指采用了关系模型来组织数据的数据库。简单来说，关系模式就是一个二维表格模型，可以类比Excel。</p>
<p>​    主要代表：MS SQL Server、Oracle、MySQL、PostgreSQL等等。</p>
<p>​    优点：容易理解、使用方便、易于维护（方便我们进行查重等操作） 。</p>
<h4 id="b-非关系型数据库管理系统：（NoSQL）"><a href="#b-非关系型数据库管理系统：（NoSQL）" class="headerlink" title="b.非关系型数据库管理系统：（NoSQL）"></a>b.非关系型数据库管理系统：（NoSQL）</h4><p>​    <del>No SQL</del>  Not Only SQL</p>
<p>​    NoSQL提出了另一种理念，以键值来存储，且结构不稳定，每一个元组都可以有不一样的字段，这种就不会局限于固定的结构，可以减少一些时间和空间的开销。可以类比Java集合中的Map。</p>
<p>​    主要代表：MongoDB（大数据处理），Redis（面向高性能并发读写）等等。</p>
<h3 id="4-为什么使用MySQL"><a href="#4-为什么使用MySQL" class="headerlink" title="4.为什么使用MySQL"></a>4.为什么使用MySQL</h3><ul>
<li>上手简单、容易安装。</li>
<li>MySQL开放源码，一般可以免费使用。</li>
<li>性能高。</li>
<li>安全性高，可依赖。</li>
</ul>
<h2 id="0x02-前置知识"><a href="#0x02-前置知识" class="headerlink" title="0x02 前置知识"></a>0x02 前置知识</h2><h3 id="1-连接使用"><a href="#1-连接使用" class="headerlink" title="1.连接使用"></a>1.连接使用</h3><h5 id="a-简单控制台命令"><a href="#a-简单控制台命令" class="headerlink" title="a.简单控制台命令"></a>a.简单控制台命令</h5><p>​    上课之前已经让你们安装了MysQL和Navicat，Navicat其实是一个可视化管理数据库的软件，这样你就不需要使用丑陋的Windows Terminal和MySQL打交道了，但是这里我们还是简单提几句终端的指令。</p>
<ul>
<li>打开window终端。先输入<code>mysql --version</code>确认自己安装正确。</li>
<li>之后我们使用<code>mysql -u root -p</code>准备连接（-u代表username，-p表示password），之后输入安装时设定的root密码便可以成功进入mysql的操作页面。</li>
</ul>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">查看所有数据库名称：SHOW DATABASES;
切换数据库：USE mydb1;
创建数据库：CREATE DATABASE [IF NOT EXISTS] mydb1;
删除数据库：DROP DATABASE [IF EXISTS] mydb1;
修改数据库编码：ALTER DATABASE mydb1 CHARACTER SET utf8;
查看当前数据库中所有表名称：SHOW TABLES;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>​    P.S. 这些指令都需要使用<code>;</code>进行结尾，不是回车。</p>
<h5 id="b-使用navicat连接"><a href="#b-使用navicat连接" class="headerlink" title="b.使用navicat连接"></a>b.使用navicat连接</h5><p>​    使用可爱的navicat之后，我们就可以直接使用可视化界面进行管理。</p>
<p>​    连接名随意，是方便我们区分的东西。主机就相当于我们的IP，如果是连接本地的数据库就是localhost或者127.0.0.1。端口使用的是MySQL的默认端口3306，用户名和密码就是最开始安装MySQL的时候设定的值。</p>
<p>​    <img src="https://gitee.com/chen-xinyang666/pictures/raw/master/202111301611860.png" alt="使用navicat连接MySQL"></p>
<p>​    这样，我们对MySQL所有的管理都可以直接通过非常简单的“点击”完成，本质上我们每一次的操作，都是一行SQL命令。等一下我们的授课内容全都基于navicat进行讲解。</p>
<h3 id="2-MySQL-基本内容"><a href="#2-MySQL-基本内容" class="headerlink" title="2.MySQL 基本内容"></a>2.MySQL 基本内容</h3><ul>
<li>这个时候，可能有小朋友要问了，为什么创建一些字段的时候我们需要加上斜单引号呢？例如：</li>
</ul>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create database `teaching`;
create table `student`;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>​    其实这个并不是必要的，添加斜单引号的时候是防止我们添加的字段名、表名和字段名跟MySQL自带的方法名冲突。这里我们用之前我出的一个招新题为例。</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE `student`  (
   `id` int NOT NULL AUTO_INCREMENT,
   `name` varchar(32) NOT NULL,
   `position` varchar(32) NOT NULL,
   `like` varchar(32) NOT NULL,
   PRIMARY KEY (`id`)
 ) ENGINE = InnoDB CHARACTER SET = utf8;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>​    这个时候，like这个字段名就和MySQL中模糊匹配的关键字like冲突了，如果不使用斜引号可能会出问题。</p>
<ul>
<li>另外还有一个问题，如果我将数据库表中的一个字段或者把命令行中的一个命令的字段改成大写，再执行之前的操作会不会有什么影响？</li>
</ul>
<p>​    答案是不会。在MySQL中，数据库与data目录中的目录相对应。数据库中的每个表都对应于数据库目录中的至少一个文件（可能是多个文件，具体取决于存储引擎）。因此，操作系统的大小写是否敏感决定了数据库大小写是否敏感，而Windows系统是对大小写不敏感的，Linux系统对大小写敏感默认情况下，库表名在Windows系统下是不区分大小写的，而在Linux系统下是区分大小写的。列名，索引名，存储过程、函数及事件名称在任何操作系统下都不区分大小写，列别名也不区分大小写。</p>
<p>​    字段值的大小写则是由mysql的校对规则来控制。一般而言，校对规则以其相关的字符集名开始，通常包括一个语言名，并且以<code>_ci</code>（大小写不敏感）、<code>_cs</code>（大小写敏感）或者<code>_bin</code>（二元）结束。</p>
<p>​    就比如我们最常见使用的utf8字符集：</p>
<ul>
<li>utf8_bin：utf8_bin将字符串中的每一个字符用二进制数据存储，区分大小写。</li>
<li>utf8_general_ci：utf8_genera_ci不区分大小写，ci为case insensitive的缩写，即大小写不敏感。</li>
<li>utf8_general_cs：utf8_general_cs区分大小写，cs为case sensitive的缩写，即大小写敏感。</li>
</ul>
<p>​    P.S. MySQL默认的字符集是不支持中文的，所以我们手动修改为utf8的编码格式，建议直接在创建表的时候就进行修改</p>
<h4 id="a-数据类型"><a href="#a-数据类型" class="headerlink" title="a.数据类型"></a>a.数据类型</h4><h5 id="a-数值"><a href="#a-数值" class="headerlink" title="(a).数值"></a>(a).数值</h5><table>
<thead>
<tr>
<th align="center">数据类型</th>
<th align="center">字节数</th>
<th align="center">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="center">tinyint</td>
<td align="center">1</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">smallint</td>
<td align="center">2</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">mediumint</td>
<td align="center">3</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">int</td>
<td align="center">4</td>
<td align="center">最常用的int类型</td>
</tr>
<tr>
<td align="center">bigint</td>
<td align="center">8</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">float</td>
<td align="center">4</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">double</td>
<td align="center">8</td>
<td align="center">精度更大</td>
</tr>
<tr>
<td align="center">decimal</td>
<td align="center"></td>
<td align="center">字符串形式的浮点数，一般在金融计算中使用</td>
</tr>
</tbody></table>
<h5 id="b-字符串"><a href="#b-字符串" class="headerlink" title="(b).字符串"></a>(b).字符串</h5><table>
<thead>
<tr>
<th align="center">数据类型</th>
<th align="center">字符串长度</th>
<th align="center">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="center">char</td>
<td align="center">固定长度大小0~255</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">varchar</td>
<td align="center">可变字符串0~65535</td>
<td align="center">可以指定长度大小</td>
</tr>
<tr>
<td align="center">text</td>
<td align="center">文本串2^16-1</td>
<td align="center">保存大文本</td>
</tr>
</tbody></table>
<h5 id="c-时间日期"><a href="#c-时间日期" class="headerlink" title="(c).时间日期"></a>(c).时间日期</h5><table>
<thead>
<tr>
<th align="center">数据类型</th>
<th align="center">时间格式</th>
</tr>
</thead>
<tbody><tr>
<td align="center">date</td>
<td align="center">YYYY-MM-DD，日期格式</td>
</tr>
<tr>
<td align="center">time</td>
<td align="center">HH:MM:SS，时间格式</td>
</tr>
<tr>
<td align="center">datetime</td>
<td align="center">YYYY-MM-DD HH:MM:SS，最常用的时间格式</td>
</tr>
</tbody></table>
<h4 id="b-字段属性"><a href="#b-字段属性" class="headerlink" title="b.字段属性"></a>b.字段属性</h4><p>​    每个字段除了类型之外，还有一些字段可能会有的各种属性。可以直接在navicat的可视化界面中直接设定这些属性值。</p>
<h5 id="a-主键"><a href="#a-主键" class="headerlink" title="(a).主键"></a>(a).主键</h5><p>​    主键是一个列或者多个列的组合（主键可以有多个），其值能唯一地标识表中的每一行。也就是说，我们在设计表时，需要有一个东西能够让每一行唯一确定，所以主键是强制要被设定的。并且，设定主键之后，主键是不能为null值的。</p>
<p>​    也就是说，如果我们有两个相同的主键，会报错误，这样保证数据的唯一性。一般在开发中，我们基本会将id设置为主键，之后给一个自动递增防止重复。</p>
<h5 id="b-默认值"><a href="#b-默认值" class="headerlink" title="(b).默认值"></a>(b).默认值</h5><p>​    默认值直观易懂，就是每个字段在初始化时如果没有赋值，那么就会给予一个设定的默认值。</p>
<p>​    P.S. 需要注意的是，navicat中的默认的默认值是null，空字符串则是<code>EMPTY STRING</code>。</p>
<h5 id="c-自动递增、无符号、填充零"><a href="#c-自动递增、无符号、填充零" class="headerlink" title="(c).自动递增、无符号、填充零"></a>(c).自动递增、无符号、填充零</h5><p>​    自动递增：每次增加一条==数据记录==时都会在原有的基础上+1。（默认）（通常用于设置唯一主键。当然，我们可以在设置中设定初始值的起始值和步长）</p>
<p><img src="https://gitee.com/chen-xinyang666/pictures/raw/master/202112071451682.png" alt="在这里设置"></p>
<p>​    无符号：相当于unsigned，声明这一列的数据不能是负数。</p>
<p>​    填充零：字面意思，不够的位数使用0来填充，比如你使用了一个长度为3的int类型的字段。前面的空位会用0自动填充。</p>
<p>​    P.S. 整形的长度并不会限制存储的数字范围，**”整型”的长度实际上可以理解为”显示长度”**，你们使用填充零之后就会有更好的理解。你们可以自己实验一下，及时在“长度”设定为3的整形字段中输入11111也能够成功输入。这就是为什么你在创建int类型的字段的时候，默认不能更改表中长度。</p>
<h2 id="0x03-CRUD"><a href="#0x03-CRUD" class="headerlink" title="0x03 CRUD"></a>0x03 CRUD</h2><p>​    MySQL的DML（数据库操作语言）遵守SQL的DML规范，主要就是对数据库里的数据增删改查操作。</p>
<p>​    如果你使用可爱的navicat，所有的增删改查操作都可以像Excel一样，直接使用可视化操作。这些操作的对应的SQL语句都可以直接在<code>SQL预览</code>中看到。当然，不能说你有可视化界面我们就可以不用去学MySQL的语句。我们这节课只是皮毛的东西，之后的包括事务、索引优化、三大范式等等，都需要你熟练掌握MySQL的基本的CRUD。不过不用太担心，你们之后的开发中会经常写到这些代码，多练就能熟练。</p>
<h3 id="Select"><a href="#Select" class="headerlink" title="Select"></a>Select</h3><p>​    data表示我们数据库中表的字段名称，我们可以写一个也可以写多个，这里就拿我们刚建好的<code>student</code>表举例。</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select &lt;data&gt; from &lt;tableName&gt;

select `name`, `like` from `student`

#我们可以使用*代表所有的字段
select * from `student`<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>​    刚刚演示的是最基本的语法，当然我们在正常使用中肯定不会使用到所有的语句。所以我们需要使用一些条件语句帮助我们过滤那些不需要的数据值。</p>
<ul>
<li><p>在索引的前面使用 <code>distinct</code> 使搜索时可以自动规避重复的值。</p>
</li>
<li><p>在最后时候使用 <code>limit</code> 限制输出的行数（==行和数组的下标一样，从0开始==），limit 5表示不超过5。如果使用limit 5, 5则表示从下标为5的数据开始，向后查询5个数据。</p>
</li>
<li><p>可以通过 <code>order by</code> 指定输出时数据的顺序问题。（默认的排序方式时升序，可以在最后加上desc实现降序排序）</p>
</li>
</ul>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE `data` (
  `id` int NOT NULL AUTO_INCREMENT,
  `number` int DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3;

SELECT DISTINCT `number` FROM `data`;
#并且你们如果使用distinct关键字，必须放在最前面

SELECT * FROM `data` LIMIT 3;
#表示查询前三个数据

SELECT * FROM `data` LIMIT 3 OFFSET 1;
#这就是一个简单的分页查询，offset表示第几组（下标从0开始）

SELECT * FROM `data` LIMIT 3, 5;
#表示从下标为3的数据开始（也就是第四行），往后查寻5个数据

SELECT * FROM `data` order by `number` (ASC);
#ASC表示正序排序，默认就是正序，可以不写

SELECT * FROM `data` order by `number` DESC;
#DESC表示倒序<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4><p>​    通常我们一般只会检索大量数据中特定值的内容，这个时候我们使用<code>where</code>语句，这个语句很像我们程序中的if判断，表示对某个或者某几个字段进行判断。</p>
<ul>
<li>= 等于。</li>
<li>&lt;&gt; /!=  这两个都是不等于。</li>
<li>between 两个值之间，是一个闭区间。</li>
<li>使用and和or进行连接，如果用得比较多还是建议用圆括号括起来。</li>
<li>in 表示取括号内字段对应的值</li>
</ul>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT * FROM student WHERE `name` = 'cxy';
#在一般的项目开发中，一般都是前端传一个特定的值给我们，然后我们根据这个值返回数据库中的数据。所以这个语句使用非常频繁

SELECT * FROM `data` WHERE `number` BETWEEN 1 AND 100 ORDER BY `number` DESC;
#使用between and 进行一个区间内的查询，并且进行排序

SELECT * FROM student WHERE `name` = 'cxy' AND `age` = 18;
#使用and进行多个条件约束

SELECT * FROM `data` WHERE `number` IN('1', '3');
#选择表中，number值为1或者3的数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h4><p>​    这个时候就不是使用 = 了，而是通过 <code>like</code> 表示 sql 语句使用通配符进行数据索引的过滤</p>
<p>​    最常见的就是 <code>%</code> 通配符，这种是通过特定位置出现的字符进行匹配得出最终的结果</p>
<ul>
<li><p><code>jet%</code> 就表示以 jet 开头的字段</p>
</li>
<li><p><code>%jet%</code> 表示在任意地方的存在jet字段的数据</p>
</li>
<li><p><code>e%f</code> 表示以 e 开头并以 f 结尾的字段</p>
</li>
</ul>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT * FROM student WHERE `like` LIKE '乐%';

SELECT * FROM student WHERE `like` LIKE '%乐%';
#只要字段中有这个值，就匹配出来<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>​    另一个有用的通配符是<code>_</code>，但是它只能匹配单个字符，而<code>%</code>是可以匹配多个字符的</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT * FROM student WHERE `like` LIKE '_ nice';
#相当于用_代替任意一个字符

SELECT * FROM student WHERE `like` LIKE '%nice';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 案例1：查询一个公司每个工种的最高工资
SELECT MAX(salary),job_id
FROM employees
GROUP BY job_id;
 
 
# 案例2：查询每个位置上的部门个数
SELECT COUNT(*),location_id
FROM departments
GROUP BY location_id;

# 在分组查询后用having关键词取代where
# 案例6：查询每个工种有奖金的员工的最高工资&gt;12000的工种编号和最高工资
SELECT MAX(salary),job_id
FROM employees
GROUP By job_id
HAVING MAX(salary)&gt;12000;
 
# 案例7：查询领导编号&gt;102的每个领导手下的员工最低工资&gt;5000的领导编号，以及其最低工资
SELECT MIN(salary),manager_id
FROM employees
WHERE manager_id&gt;102
GROUP BY manager_id
HAVING MIN(salary)&gt;5000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h4><p>​    我们可以在select里嵌套一个select，这就是所谓的子查询。</p>
<p>​    当然，有些子查询，我们也可以使用联表查询的形式。只不过看个人的使用。</p>
<h5 id="放在where后面"><a href="#放在where后面" class="headerlink" title="放在where后面"></a>放在where后面</h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT * FROM student WHERE age &gt;
(SELECT age FROM student WHERE uid = 5);
#查询age大于uid=5的age的数据值

SELECT * FROM student WHERE age IN
(SELECT DISTINCT age FROM student WHERE `name` = 'ckt');
#使用子查询的好处就是我们可以不用使用硬编码，可以使用可变的数据替换

SELECT id FROM `data` WHERE number =
(SELECT MAX(number) FROM `data`);

# 案例2：返回其它工种中比job_id为`IT_PROG`工种所有员工的工资都要低的员工的员工号、姓名
select id,name
from employees
where salary &lt; all(  # min
    select distinct salary 
    from employees
    where job_id = 'IT_PROG'
) and job_id != 'IT_PROG';
#all表示所有的
#除了all之外，还有上面使用的in、not in、any(some)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="放from后面"><a href="#放from后面" class="headerlink" title="放from后面"></a>放from后面</h5><p>​    将select返回的结果当作表（数据源）来使用，必须起别名</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 案例1、查询每个部门的平均工资的工资等级
select ag_dep.*, grade.level
from(
   select avg(salary) ag ,department_id
   from employees
   group by department_id
) ag_dep
inner join job_grades g
on ag_dep.ag between lowest_sal and highest_sal;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="笛卡尔乘积查询"><a href="#笛卡尔乘积查询" class="headerlink" title="笛卡尔乘积查询"></a>笛卡尔乘积查询</h4><p>​    在select操作中直接使用from连结多个表，这样的弊端就是结果就会变成 x * y，实现了一个超级加倍。</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT e.`name`, e.location_id, e.company_id, c.`name` `company`
FROM employee e, company c
WHERE e.company_id = c.uid;
#MySQL中，我们可以直接在字段或者表名后面对其进行重新命名
#字段可以像Java对象的属性一样，通过.进行调用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>​    从这个糟糕的结果你可以看出来，如果使用这种查询方式，那么效率会非常低下。</p>
<p><img src="https://gitee.com/chen-xinyang666/pictures/raw/master/202112030450649.png" alt="糟糕的结果"></p>
<h4 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h4><p>​    连接查询是另一种类型的多表查询。连接查询对多个表进行JOIN运算，简单地说，就是先确定一个主表作为结果集，然后，把其他表的行有选择性地“连接”在主表结果集上。这种思想明显比之前那种全部拼接在一起的高明得多。</p>
<ul>
<li>内连接：inner join 需要两个表都有这个信息</li>
<li>外连接：right(left) join 左（右）作为主表</li>
</ul>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT e.`name`, e.location_id, e.company_id, c.`name` company_name
FROM employee e
INNER JOIN company c
ON e.company_id = c.uid;

SELECT e.`name`, e.location_id, e.company_id, c.`name` company_name
FROM employee e
RIGHT JOIN company c
ON e.company_id = c.uid;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="Insert"><a href="#Insert" class="headerlink" title="Insert"></a>Insert</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">insert into &lt;tableName&gt; (&lt;content&gt;) values (&lt;content&gt;)

INSERT INTO `student`(`name`, `age`, `scores`) VALUES
('ckt', 18, 34.2),
('ooo', 10, 30.4);
#执行这条指令之后，我们就可以向数据库中添加这些数据数据，我们可以添加多行数据
#因为我们的主键设置了自动递增，所以即使添加的命令中没有这个字段，数据库中会对其自动递增<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">update &lt;tableName&gt; set &lt;data&gt; = &lt;content&gt;

UPDATE student SET `name` = '嘉然' WHERE `name` = 'cxy';
#将表中name字段为cxy的数据替换成嘉然<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">delete from &lt;tableName&gt;

DELETE FROM student WHERE `name` = 'ccc';

#还有一个命令是truncate，和delete的区别在于它可以把自增的计数器置0
#使用这个我们就可以删库跑路啦~
TRUNCATE `user`<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="0x04-例题"><a href="#0x04-例题" class="headerlink" title="0x04 例题"></a>0x04 例题</h2><p>​    看着很熟悉嘛？没错，这就是我出的应应招新题中的SQL题。鉴于你们很多人都没做，这次我们就把这个题目当作课堂习题。</p>
<p>​    最近天下都不太平，又是外卖被偷风波又是离奇失踪案件。可是最近，发生一件大事，平安学长的手办老婆被偷了！他悲愤欲绝，发誓一定要找出凶手，他已经通过监控将嫌疑犯锁定在科协内部。但是科协人员混杂，一般调查难以进行下去，好在有人已经将科协全部人员整合到一个MySQL数据库表中。可问题来了，这个学长对SQL操作并不是很熟练。请你运用你熟练的SQL知识，帮助这位可怜的学长，找到嫌犯并将其绳之以法。</p>
<p>​    下面是需要使用的表的数据结构（ SQL 源码）</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE `student`  (
  `id` int NOT NULL AUTO_INCREMENT,
  `name` varchar(32) NOT NULL,
  `position` varchar(32) NOT NULL,
  `like` varchar(32) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE = InnoDB CHARACTER SET = utf8;
 
INSERT INTO `student` ( `id`, `name`, `position`, `like` ) VALUES
( 1, '金老板', 'A', '想当嘉然小姐的狗' ),
( 2, '栋栋子', 'A', '夸赞学弟好强啊' ),
( 3, '夏桑', 'B', '嘉然我真的好喜欢你' ),
( 4, '提莫', 'B', '种蘑菇' ),
( 5, '陈三金', 'B', '女装引流' ),
( 6, '金坷垃', 'B', '吸收氮磷钾' ),
( 7, '祖师爷', 'C', '南邮还是宁最卷' ),
( 8, '杂鱼', 'C', '欺负cxy' );<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<ol>
<li>通过几天的不懈排查，有知情人士透露，当时有人正使用平安学长的电脑刷着 B 站。当时传来一阵“嘉然，我真的好喜欢你啊。为了你，我要听《猫中毒》”“呜呜，然然，我的然然”。可以确定嫌疑人是嘉心糖，他决定趁热打铁继续调查。所以，在他忙着进行接下来的调查的时候，请你使用SQL知识帮他解决问题。<br>要求：用一条SQL语句把兴趣中提到嘉然的同学都搜索出来。</li>
</ol>
<ol start="2">
<li>但是很快疑点便浮出水面，无奈的平安学长只好去请教 F 侦探，在侦探的帮助下。很快就找到了相关的线索，但是还不能进行确认，所以侦探 F 为了比对证据，需要你查找出部分科协人员的名单，并且需要对名字进行排序。“真実はいつもひとつ”，F 丢下这句话后就走了，请你运用你熟练的 SQL 知识解决这个问题吧。<br>要求：用一条SQL语句对姓名进行排序并输出倒数三个人的名字（注意，F 侦探只需要名字）。</li>
</ol>
<ol start="3">
<li>最后真相公之于众，原来是两位金同学联合偷走了平安学长的老婆。F 侦探觉得以平安学长的脾气，可能会把那两个人给鲨了，所以想请你根据科协公约审判这两个人的罪行，确保公平公正。（科协公约已经通过下表的形式给出）请你使用 SQL 的 连接查询 知识，给这两位同学处于恰当的惩罚。除了连接查询之外，还有一种多表查询的方式为笛卡尔乘积式查询，但是 F 侦探并不建议你使用这种方式，你能说说为什么嘛。</li>
</ol>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE `crime`  (
   `punish_id` int NOT NULL AUTO_INCREMENT,
   `punishment` varchar(64) NOT NULL,
   `position` varchar(32) NOT NULL,
   PRIMARY KEY (`punish_id`)
 ) ENGINE = InnoDB CHARACTER SET = utf8;
 
 INSERT INTO `crime` VALUES  
 (1, '禁止膜拜 JC', 'A'),
 (2, '不准看 AS', 'B'),
 (3, '打扫大活一个星期', 'C'),
 (4, '自裁', 'A'),
 (5, '拿来吧你', 'B'),
 (6, '宵禁', 'C'),
 (7, '异端教徒审判', 'A');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>​    答案：</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT * FROM student WHERE `LIKE` LIKE '%嘉然%';

SELECT `name` FROM student ORDER BY `name` DESC LIMIT 3;

 SELECT 
     student.`name`,
     student.position,
     crime.punishment
 FROM student
 INNER JOIN crime
 ON student.position = crime.position
 WHERE (student.position = 'A' OR student.position = 'B')
 AND student.`name` LIKE '金%';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>自己，到底想要什么样的生活</title>
    <url>/2021/02/26/zi-ji-dao-di-xiang-yao-shi-me-yang-de-sheng-huo/</url>
    <content><![CDATA[<p>引用的文章来自一篇<a href="https://survivesjtu.gitbook.io/survivesjtumanual/xu/xin-ban-xu-todo">上海交大的文章</a>，当然，它的受众水平比我高了几个阶级的档次</p>
<p>起码是那些一线城市顶级学校的精英学生们，毕竟书中都说他们是“落榜”才来的交大</p>
<p>这就引出了我国教育资源分配不平等的问题（这个事情，也许我会出篇博客单独讨论这件事情）</p>
<p>本文所有引用的话都会做上标记，本文仅摘录自己认为比较重要的语句，详细还请看看原本</p>
<h3 id="既来之，则安之"><a href="#既来之，则安之" class="headerlink" title="既来之，则安之"></a>既来之，则安之</h3><p>人外有人，山外有山。有些人是奋发努力，担负着全家人的期望进入了一所大学，这取决他所处的学习环境和天赋</p>
<p>南邮也是这样，我本人就是属于压分进来的一批（虽然高考前我一直想进的是南师大）</p>
<p>当然，不乏有些大佬（竞赛啊，清北报送失败啊……）发挥失常进入了这所硬件设施确实有待提升的大学（x</p>
<p><code>由于历史原因我国有两所著名的TOP2高校，经过几十年的集中建设，清北与第二梯队的高校的学科总体发展上也有着较大的差距，录取生源亦如此，在很多高中老师们都信奉着“唯清北论”，一部分同学在刚入学时可能会有着“考败来交”的心态，交大每年也的确都会有若干对专业亦或者学校不满意退学重新高考的案例，如果你在经过仔细的分析自己的真实实力水平加上复读一年的机会成本后觉得可行，应该尽早与家人沟通返回高中备战次年高考如果选择在交大继续读书，你也会发现未来的道路依然宽广，你会有机会申请本科转学到海外，亦或者大四时申请海外名校的硕士、博士项目，那么此时你最应该关注的便是未来四年里如何合理利用好交大平台给予你的各项资源不断提升自己</code></p>
<p>既然你来到了这里，又没有重修高四的想法，就需要持之以恒</p>
<p>（这里不得不吐槽一下我认识的某个人，如果不喜欢，强行抗拒又有什么用，只有不断竞争才能获得出路）</p>
<h3 id="知己知彼"><a href="#知己知彼" class="headerlink" title="知己知彼"></a>知己知彼</h3><p>脱离了这样懊悔地思维，接下来就是确定自己的目标，这里生存手册也给了四个明确的方向</p>
<p>（这些东西都有归纳出不同的利弊，十分的全面，希望各位认真阅读）</p>
<p>1.了解你的专业</p>
<p>2.清除你的技术栈</p>
<p>3.知晓你本科4年想做什么</p>
<p>4.想清楚毕业之后想做什么</p>
<p><code>你未来可能会用到的能力包括但不限于：</code></p>
<ol>
<li><p><code>本专业的专业知识，这是你安身立命的根本，对本领域有中长期的判断</code></p>
</li>
<li><p><code>表达能力，如何去说服你的上司还有顾客理解并接受你的idea和产品</code></p>
</li>
<li><p><code>相关信息检索、过滤、总结、可视化等的能力</code></p>
</li>
<li><p><code>交际能力，向别人展现自己的价值，在自己需要帮助的时候也能找到最合适的朋友寻求帮助</code></p>
</li>
<li><p><code>抗压能力，主要是对逆境的适应力、容忍力、耐力，能较好应对生活工作中的挫折</code></p>
</li>
<li><p><code>独立思考，在信息过载的当下尽量避免被错误消息带节奏</code></p>
</li>
<li><p><code>时间管理，以后的日子里你会被生活的柴米油盐和很多工作学习以外的杂事消耗精力，再也不是大学以前父母帮你操办大部分事情了，你需要</code></p>
<p><code>高效管理利用剩余的时间</code></p>
</li>
</ol>
<p><code>假设你现在人生游戏的开局是在一个心仪的大学（交大）读了一个喜欢的专业，那么你的开局已经是同龄人中的至少前1%了</code></p>
<p><code>GPA高的同学或许还能靠保研直博暂缓进入社会的进度条（当然很多同学保研直博也是一开始就定下的目标，并未考虑过直接进入社会），学业不佳的同学或许要再像准备高考一样备战考研了，而近些年考研难度也是在肉眼可见地提升。进入社会之后人生的分支要比学校里多得多，在此也不一一举例，在象牙塔里被保护得久了容易跟现实社会脱节，这些东西要留给你自己去摸索</code></p>
<h3 id="三省其身"><a href="#三省其身" class="headerlink" title="三省其身"></a>三省其身</h3><h4 id="破除错误思维"><a href="#破除错误思维" class="headerlink" title="破除错误思维"></a>破除错误思维</h4><p>世界观决定方法论，或者用句粗俗的话来讲-屁股决定脑袋</p>
<p>在做事之前，我们先要更正自己的思想，开头错，之后只能举步维艰</p>
<p>手册中，明确提出拜托两种错误思维</p>
<p>1.高考思维</p>
<p><code>如果一个人把政策评分作为自己的至高追求，那么他就是这个政策的牺牲品</code></p>
<p><code>大学四年留给你的是你的人生，在你毕业之时，那一串苍白的分数其实就已经作废了</code></p>
<p>2.被动思维</p>
<p><code>“怕老师点名”、“为了抄笔记作业”、“记录考试重点”这些话，充其量只是我们被迫上课的借口，却不能成为我们心悦诚服去上课的理由。真正能成为我们上课理由的，只有我们对科学文化知识的渴望。</code></p>
<p><code>如果是否上课对你的考试成绩影响不大；如果我们感兴趣的知识不在学校的课程表上；如果上课学习的效果足够差，效率足够低，以至于通过自习，能够在更短的时间掌握知识；那么你还需要去上课吗？</code></p>
<h4 id="反思自己的学习方式"><a href="#反思自己的学习方式" class="headerlink" title="反思自己的学习方式"></a>反思自己的学习方式</h4><p>这部分的内容，我个人不能完全赞同的，但是又不乏有道理的地方</p>
<p>扎实的基础，正是通往更高层次知识的一个重要保证</p>
<p>（不过，没有多少人会记住这些基础的知识，仅仅只是作为一个通过考试的方法）</p>
<p>这一切的前提，都是这个人在这个方向上想有所作为</p>
<p><code>我手上一本1300页的数学手册，上面记录了人类文明从远古直到二十世纪后半叶的主要数学成果。而我校高等数学教材（上下册）所涵盖的内容，不超过其中的130页。一个真正有志于建造科学大厦的人，是不应抱着一块儿砖头精雕细琢的工具。学习最需要的，不是悲壮的毅力，而是对无限未知的渴求</code></p>
<h4 id="意识到自己的价值"><a href="#意识到自己的价值" class="headerlink" title="意识到自己的价值"></a>意识到自己的价值</h4><p>在这里，手册的撰写者秉持了和我一样的观点-不要廉价出卖自己的劳动力</p>
<p><code>从本质上说，绝大部分同学们之所以选择大学毕业后再参加工作，是看上了更加体面的薪资待遇——大学毕业之后，我们的劳动会变得更有价值。在此，请不要提及所谓“劳动平等”之类的错误观点。劳动所创造的价值从来都不是均等的，而且不同行业的劳动早已明码标价了</code></p>
<p><code>在交大，大多数同学家中没有许多房子也没有许多车，但他们是幸运的，至少有家庭可以负担他们在校期间的开销，不需要同学们为了筹措生活费，一边上学一边廉价地出卖自己宝贵的时间。所以，对于生计无虞的同学们，我们更应该做的不是为了蝇头小利在最底层的劳动中苦苦挣扎，而是应当积极地利用这份时间来提高我们的身价，为今后出卖高价值劳动创造机会</code></p>
<h4 id="正确使用自己的时间"><a href="#正确使用自己的时间" class="headerlink" title="正确使用自己的时间"></a>正确使用自己的时间</h4><p>在大学，重要的是你自己的时间</p>
<p>在高中时，我们被父母老师把时间安排得明明白白的，很少有自己的业余时间</p>
<p>既然已经知道这样的学习方式不适合你自己，何不跳出来，多给自己点空闲时间？</p>
<p>大学，并不是唯绩点论</p>
<p><code>（如果按照学校的规划，你会发现你可以自由支配的业余时间少得可怜）</code></p>
<p><code>平庸的生活方式是麻醉药。他只会束缚你，让你没有作为，甚至没有出息地度过大学的四年</code></p>
<p><code>无论你做的事情是否有意义——哪怕任何事情都不做，时间也会从我们的身边溜走。我们必须一日三省问自己，今天的时间是否过得有价值</code></p>
<p><code>除非你要保研或者转专业，其余的情况下 GPA 绝对不是最重要的因素</code></p>
<h4 id="总有值得去做的事情"><a href="#总有值得去做的事情" class="headerlink" title="总有值得去做的事情"></a>总有值得去做的事情</h4><p>我也不想再三地“吐槽”中国式的形式主义了（也许会新开文章，希望不要给我扣上反动的帽子）</p>
<p>很多课程，事情，根本就是没有意义的事情，想学的也仅仅是出于兴趣或者功利性</p>
<p>但是，就是这样，学校总能找一些牛头不对马尾的理由，原因仅仅是不想在学生面前丢了脸</p>
<p>这种东西，这是我最鄙夷的</p>
<p>所以，当得知我所属专业不学大物时，我是很高兴的，自己提升的时间多了</p>
<p><code>“这些知识多学一些也没有什么不好，没准哪天就能用得到呢！”这种话乍听起来仿佛很有道理，但实际上却是不折不扣的谎言</code></p>
<p><code>连高中教学都已经文理分家，作为一名大学生，我们更应当对自己的将来有一个最基本的规划。令人遗憾的是，学校教务部门经常异想天开地把一些八竿子打不着的课程推到我们面前。以为让机动学院的学生同时掌握心理学和化学实验，就能打造出所谓的复合型人才。我们之所以拒绝学习那些对自己不是特别有用的知识，是因为这些知识对我们的价值太低</code></p>
]]></content>
      <categories>
        <category>人生</category>
      </categories>
      <tags>
        <tag>个人感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>论部署后端项目</title>
    <url>/2021/12/09/lun-bu-shu-hou-duan-xiang-mu/</url>
    <content><![CDATA[<h2 id="获得一个服务器"><a href="#获得一个服务器" class="headerlink" title="获得一个服务器"></a>获得一个服务器</h2><p>我们可以自己在腾讯云上购买一个云服务器，之后我们就可以对它进行随意的折腾</p>
<p>这里我们就直接使用科协的服务器举例，那么首先，我们不可能在整个服务器上都配置你的环境。我们需要一个虚拟机，然后我们在虚拟机上对环境进行配置。这里我们使用 ESXi，ESXi 是 vmware 推出的一款优秀的服务器级别的虚拟机。它与我们常用的虚拟机不同的是，日常使用的虚拟机是需要依赖于一个操作系统的，比如在 window 上使用 vmware，或者 linux 上使用 virtualbox。而 ESXi 不依赖于任何操作系统，它本身就可以看作一个操作系统，然后可以在它上面安装系统</p>
<br>

<h3 id="创建一个虚拟机"><a href="#创建一个虚拟机" class="headerlink" title="创建一个虚拟机"></a>创建一个虚拟机</h3><p>有了 ESXi 我们可以直接在上面创建一个虚拟机</p>
<p><img src="https://gitee.com/chen-xinyang666/pictures/raw/master/202112091917355.png" alt="这里我创建了一个2核4G的虚拟机（就和学生特惠的一样）"></p>
<p><img src="https://gitee.com/chen-xinyang666/pictures/raw/master/202112091856047.png" alt="记得在驱动部分选择我们下载好的镜像文件"></p>
<p><img src="https://gitee.com/chen-xinyang666/pictures/raw/master/202112091917144.png" alt="之后我们便可以直接在 ESXi 上直接使用 bash"></p>
<p>当然，如果你觉得 ESXI 的界面实在过于丑陋，你可以直接去 Vmware 上进行连接</p>
<p><img src="https://gitee.com/chen-xinyang666/pictures/raw/master/202112091900916.png" alt="使用 Vmware 对服务器进行连接"></p>
<p>在进行各种配置之后，我们的虚拟机就创建好了。但是有一个问题，这个虚拟机是没有 ip 地址的！这就导致我们只能在内网连接虚拟机才能使用，所以我们需要给我们的虚拟机分配 ip</p>
<br>

<h3 id="分配-ip"><a href="#分配-ip" class="headerlink" title="分配 ip"></a>分配 ip</h3><p>分配 ip 的话我们首先得修改一个 centos 的配置（这个东西坑了我一晚上，因为 ubuntu 是不需要配置的）</p>
<p>我们首先需要进入 <code>/etc/sysconfig/network-scripts/</code> 进入网卡配置的文件夹，之后把 ifcfg-ens192 里面的 ONBOOT 改成 yes，这样我们就可以分配 ip 了</p>
<p><img src="https://gitee.com/chen-xinyang666/pictures/raw/master/202112091913180.png" alt="对配置文件进行修改"></p>
<p>之后我们使用 ip addr 查看我们的 Mac 地址和当前的 ip 地址，通过图片可以知道，我们的 Mac 地址是 00:0c:29:26:60:1b，ip 地址目前为空，也就表示我们还没进行地址的分配</p>
<p><img src="https://gitee.com/chen-xinyang666/pictures/raw/master/202112091916141.png" alt="查看网络"></p>
<p>说到地址的分配，我们就会使用 openwrt 进行简化操作</p>
<p><img src="https://gitee.com/chen-xinyang666/pictures/raw/master/202112091921747.png" alt="给我们的虚拟机分配一个 ip 192.168.1.33"></p>
<p>然后我们使用 systemctl restart network 重启网卡配置之后，我们就可以正常获取 ip 了。当然，如果担心，可以直接用 ip addr 检查一下。我们会用 DHCP 进行 ip 分配。**DHCP(Dynamic Host Configuration Protocol，动态主机配置协议)**是一个局域网的网络协议，使用UDP协议工作，主要有两个用途：给内部网络或网络服务供应商自动分配IP地址，给用户或者内部网络管理员作为对所有计算机作中央管理的手段</p>
<p><img src="https://gitee.com/chen-xinyang666/pictures/raw/master/202112091948020.png" alt="可以看到，我们的 ip 已经被分配上去了"></p>
<p>说明我们的 ip 已经分配上去了，过期时间是无限。如果不放心，可以使用 Xshell 进行测试</p>
<p><img src="https://gitee.com/chen-xinyang666/pictures/raw/master/202112091923914.png" alt="openwrt 里显示我们已经分配好了"></p>
<br>

<h3 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h3><p>如果我们单纯使用局域网，那么我们就只能在目前服务器 lan（Local Area Network，即局域网） 的网络下进行访问。这个时候我们就采取端口转发，相当于我们在局域网的请求都转发到到 wan（Wide Area Network，即广域网） 上。因为科协的路由器的 wan 口对应的是校园网，这样只要连接上校园网，用户就可以进行访问了</p>
<p>要注意的是，服务器默认是开启22端口的，如果我们以后需要转发其他端口我们得先在防火墙中开放端口</p>
<p><img src="https://gitee.com/chen-xinyang666/pictures/raw/master/202112092015867.png" alt="在 openwrt 防火墙中端口转发的设置"></p>
<p>这样，位于 lan 内部的这个 ip 的 22 端口就转发到了路由器对应 ip 的 7500 端口</p>
<p><img src="https://gitee.com/chen-xinyang666/pictures/raw/master/202112092015518.png" alt="这样我们就可以使用转发的 ip 和端口进行登录"></p>
<br>

<h2 id="部署-jar-包"><a href="#部署-jar-包" class="headerlink" title="部署 jar 包"></a>部署 jar 包</h2><br>

<h3 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h3><br>

<h4 id="安装-jre"><a href="#安装-jre" class="headerlink" title="安装 jre"></a>安装 jre</h4><p>首先我们需要配置 jre(Java runtime environment) 这样我们才能运行 Java 程序</p>
<p>在这之前我们需要安装一个 wget 命令，可以使用 yum install wget 来安装它</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看版本</span>
yum list <span class="token operator">|</span><span class="token function">grep</span> java

<span class="token comment">#安装jre</span>
yum <span class="token function">install</span> java java-devel

<span class="token comment">#配置环境变量</span>
<span class="token function">vi</span> /etc/profile

<span class="token comment">#set java environment</span>
<span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.171-7.b10.e17.x86_64
<span class="token assign-left variable">JRE_HOME</span><span class="token operator">=</span><span class="token variable">$JAVA_HOME</span>/jre
<span class="token assign-left variable">CLASS_PATH</span><span class="token operator">=</span>.:<span class="token variable">$JAVA_HOME</span>/lib/dt.jar:<span class="token variable">$JAVA_HOME</span>/lib/tools.jar:<span class="token variable">$JRE_HOME</span>/lib
<span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$JAVA_HOME</span>/BIN:<span class="token variable">$JRE_HOME</span>/bin
<span class="token builtin class-name">export</span> JAVA_HOME JRE_HOME CLASS_PATH <span class="token environment constant">PATH</span>

<span class="token comment">#使环境变量即时生效</span>
<span class="token builtin class-name">source</span> /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<br>

<h4 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h4><p>因为在 centos 中配置 mysql 实在是太麻烦了，我们就直接使用 docker 了</p>
<p>首先是对 docker 的安装</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#使用国内源一键安装命令</span>
<span class="token function">curl</span> -sSL https://get.daocloud.io/docker <span class="token operator">|</span> <span class="token function">sh</span>

<span class="token comment">#设置仓库</span>
<span class="token function">sudo</span> yum <span class="token function">install</span> -y yum-utils <span class="token punctuation">\</span>
  device-mapper-persistent-data <span class="token punctuation">\</span>
  lvm2
  
<span class="token comment">#选择国内的一些源地址，设置清华大学源</span>
<span class="token function">sudo</span> yum-config-manager <span class="token punctuation">\</span>
    --add-repo <span class="token punctuation">\</span>
    https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/centos/docker-ce.repo
    
<span class="token comment">#安装 Docker Engine-Community</span>
<span class="token function">sudo</span> yum <span class="token function">install</span> docker-ce docker-ce-cli containerd.io

<span class="token comment">#启动 Docker</span>
<span class="token function">sudo</span> systemctl start docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<br>

<h4 id="安装-mysql"><a href="#安装-mysql" class="headerlink" title="安装 mysql"></a>安装 mysql</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#拉取 mysql 的镜像</span>
docker pull mysql

<span class="token comment">#创建数据挂载点（即存储数据的地方，这样即便mysql容器删除了，数据还是在）</span>
docker volume create mysql_data

<span class="token comment">#运行 mysql 容器</span>
docker run --name mysql -p <span class="token number">3306</span>:3306 -v mysql_data:/var/lib/mysql -e <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> -d mysql:latest

<span class="token comment">#进入容器 /bin/bash</span>
docker <span class="token builtin class-name">exec</span> -it mysql <span class="token function">bash</span>

<span class="token comment">#进入 mysql</span>
mysql -u root -p
<span class="token comment">#之后会提示你输入你设定的 root m</span>

<span class="token comment">#mysql 授权</span>
GRANT ALL PRIVILEGES ON *.* TO <span class="token string">'root'</span>@<span class="token string">'%'</span>WITH GRANT OPTION<span class="token punctuation">;</span>
<span class="token comment">#刷新</span>
FLUSH PRIVILEGES<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>–name 镜像名称 </p>
<p>-p映射端口 </p>
<p>-v /mysql/datadir:/var/lib/mysql 设置本地挂载点</p>
<p>-e MYSQL_ROOT_PASSWORD=123456 设置密码</p>
<p>-d mysql 容器名称</p>
<p>这样我们在本机已经配置好了一个 mysql 的环境，但是这个环境只能在本机启动。这个时候我们就需要使用端口转发，这样我们也能在校园网内使用 navicat 操作 mysql 了</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看防火墙的状态</span>
firewall-cmd --state<span class="token punctuation">;</span>

<span class="token comment">#如果没有开启，输入命令</span>
systemctl start firewalld.service<span class="token punctuation">;</span>

<span class="token comment">#开启对应端口</span>
firewall-cmd --zone<span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token string">"对应端口"</span>/tcp --permanent<span class="token punctuation">;</span>

<span class="token comment">#重启防火墙</span>
systemctl restart firewalld.service<span class="token punctuation">;</span>

<span class="token comment">#重新载入配置</span>
firewall-cmd --reload<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://gitee.com/chen-xinyang666/pictures/raw/master/202112092141618.png" alt="进行端口转发之后，我们就可以连接上了"></p>
<br>

<h4 id="安装-rz-sz"><a href="#安装-rz-sz" class="headerlink" title="安装 rz sz"></a>安装 rz sz</h4><p>安装这个之后我们就可以直接从我们本机直接上传文件到 ssh 连接的服务器上</p>
<p>这个对于我们上传 jar 包是必要的</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#安装 rz</span>
yum <span class="token function">install</span> -y lrzsz.x86_64

<span class="token comment">#使用</span>
rz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<br>

<h3 id="部署项目"><a href="#部署项目" class="headerlink" title="部署项目"></a>部署项目</h3><br>

<h4 id="上传-jar-包"><a href="#上传-jar-包" class="headerlink" title="上传 jar 包"></a>上传 jar 包</h4><p>在 Spring-Boot 中，jar 包内置了一个 tomcat。tomcat 简单地说就是一个运行 Java 的网络服务器，可以让别人也能访问我们的前端页面。所以我们把 jar 上传到我的服务器之后，只需要在后台一运行就可以跑了</p>
<p>首先是通过 idea 进行 package 操作</p>
<p><img src="https://gitee.com/chen-xinyang666/pictures/raw/master/202112101225260.png" alt="通过可视化操作，我们快速打包"></p>
<p><img src="https://gitee.com/chen-xinyang666/pictures/raw/master/202112101226718.png" alt="如果想要修改 jar 的名称，可以直接在 maven 包中进行改动"></p>
<p>我们将打包好的 jar 包拷贝下来，使用 rz 命令进行上传，这样就可以了</p>
<p><img src="https://gitee.com/chen-xinyang666/pictures/raw/master/202112101246981.png" alt="有时候使用 rz 可能会出错，这个时候再试一次基本就可以了"></p>
<br>

<h4 id="运行-jar-包"><a href="#运行-jar-包" class="headerlink" title="运行 jar 包"></a>运行 jar 包</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#当前ssh窗口被锁定，可按CTRL + C打断程序运行，或直接关闭窗口，程序退出</span>
java -jar shareniu.jar

<span class="token comment">#java -jar shareniu.jar &amp;</span>
java -jar shareniu.jar <span class="token operator">&amp;</span>

<span class="token comment">#nohup 意思是不挂断运行命令,当账户退出或终端关闭时,程序仍然运行</span>
<span class="token comment">#当用 nohup 命令执行作业时，缺省情况下该作业的所有输出被重定向到nohup.out的文件中，除非另外指定了输出文件</span>
<span class="token function">nohup</span> java -jar shareniu.jar <span class="token operator">&amp;</span>

<span class="token comment">#command &gt;out.txt command 的输出重定向到 out.txt 文件，即输出内容不打印到屏幕上，而是输出到 out.txt 文件中</span>
<span class="token function">nohup</span> java -jar shareniu.jar <span class="token operator">&gt;</span>temp.txt <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当然，我们可以使用更加优雅的 screen 方法</p>
<p><strong>GNU Screen</strong> 是一款由 GNU 计划开发的用于命令行终端切换的自由软件。用户可以通过该软件同时连接多个本地或远程的命令行会话，并在其间自由切换</p>
<p>GNU Screen 可以看作是窗口管理器的命令行界面版本。它提供了统一的管理多个会话的界面和相应的功能，可以类比 windows 开多个桌面，熟练使用之后比直接后台运行更加优雅</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> -y <span class="token function">screen</span>

<span class="token function">screen</span> -S yourname -<span class="token operator">&gt;</span> 新建一个叫yourname的session

<span class="token function">screen</span> -ls -<span class="token operator">&gt;</span> 列出当前所有的session

<span class="token function">screen</span> -r yourname -<span class="token operator">&gt;</span> 回到yourname这个session

<span class="token function">screen</span> -d yourname -<span class="token operator">&gt;</span> 远程detach某个session

<span class="token comment">#通过快捷键 ctrl+a+d 快速从我们创建的 screen 中回到我们的主窗口中</span>
<span class="token comment">#从我个人的角度来看，使用 screen 无疑是更加优雅的一种方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果还想使用端口转发进行访问，需要提前开启对应端口的防火墙</p>
<p>运行 jar 包时，使用指令 java -jar 时，如果涉及 IPV4,一定要把 IPv4 参数放前面，jar 包参数置后，不然 IPv4 不生效</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">java -Djava.net.preferIPv4Stack<span class="token operator">=</span>true -jar test.jar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<br>

<h2 id="部署-laravel"><a href="#部署-laravel" class="headerlink" title="部署 laravel"></a>部署 laravel</h2><p>在经历两个晚上的小崩溃之后，最后还是发现还是使用宝塔界面更加方便。手动配置 php 环境的时候，不知道为什么就会出现未知的错误（甚至需要你使用 gcc 手动编译）。再加上国内糟糕的编程论坛环境，导致这成一个非常麻烦的点</p>
<br>

<h3 id="配置宝塔面板"><a href="#配置宝塔面板" class="headerlink" title="配置宝塔面板"></a>配置宝塔面板</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#安装最新的宝塔面板</span>
yum <span class="token function">install</span> -y <span class="token function">wget</span> <span class="token operator">&amp;&amp;</span> <span class="token function">wget</span> -O install.sh http://download.bt.cn/install/install_6.0.sh <span class="token operator">&amp;&amp;</span> <span class="token function">sh</span> install.sh

<span class="token comment">#如果想要进行端口转发，首先得先开启 8888 端口，之后得删除一个配置文件</span>
<span class="token function">rm</span> -f /www/server/panel/data/admin_path.pl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://gitee.com/chen-xinyang666/pictures/raw/master/202112101458931.png" alt="安装之后会有给定的提示信息"></p>
<p>之后我们就可以直接搭建 lnmp 环境（Linux nginx MySQL php），然后我们就可以开始准备 laravel 项目的构建了</p>
<p><img src="https://gitee.com/chen-xinyang666/pictures/raw/master/202112101501369.png" alt="耐心等待后台安装"></p>
<p><img src="https://gitee.com/chen-xinyang666/pictures/raw/master/202112101504219.png" alt="我们可以在设置中调整我们的用户名和密码"></p>
<br>

<h3 id="配置-git"><a href="#配置-git" class="headerlink" title="配置 git"></a>配置 git</h3><p>因为 laravel 跟 jar 包不同，我们需要的是一个完整的项目，所以最好的办法是使用 git 将我们的项目 clone 到服务器上</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#开启 Wandisco GIT 源，这样能保证下载到较新版本的 git</span>
<span class="token function">vi</span> /etc/yum.repos.d/wandisco-git.repo

<span class="token comment">#这样就在 /etc/yum.repos.d/ 目录新建了一个 yum 源文件，我们修改它的配置</span>
<span class="token punctuation">[</span>wandisco-git<span class="token punctuation">]</span>
<span class="token assign-left variable">name</span><span class="token operator">=</span>Wandisco GIT Repository
<span class="token assign-left variable">baseurl</span><span class="token operator">=</span>http://opensource.wandisco.com/centos/7/git/<span class="token variable">$basearch</span>/
<span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">1</span>
<span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">1</span>
<span class="token assign-left variable">gpgkey</span><span class="token operator">=</span>http://opensource.wandisco.com/RPM-GPG-KEY-WANdisco

<span class="token comment">#导入 GPG keys</span>
<span class="token function">rpm</span> --import http://opensource.wandisco.com/RPM-GPG-KEY-WANdisco

<span class="token comment">#安装 git</span>
yum <span class="token function">install</span> <span class="token function">git</span>

<span class="token comment">#查看版本号</span>
<span class="token function">git</span> --version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://gitee.com/chen-xinyang666/pictures/raw/master/202112111041065.png" alt="我安装的 git 版本为2.31.1"></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#配置 git 对应的用户名和邮箱</span>
<span class="token function">git</span> config --global user.name <span class="token string">"Your Name"</span>
<span class="token function">git</span> config --global user.email <span class="token string">"youremail@yourdomain.com"</span>

<span class="token comment">#通过以下命令生成我们的公钥</span>
ssh-keygen -t rsa<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>之后将我们的公钥添加到我们 GitHub 的 ssh 中就可以使用了</p>
<p><img src="https://gitee.com/chen-xinyang666/pictures/raw/master/202112111053535.png" alt="使用 xftp 打开我们的公钥文件夹（需要提前设置显示隐藏文件）"></p>
<p><img src="https://gitee.com/chen-xinyang666/pictures/raw/master/202112111102339.png" alt="我们的项目也成功克隆"></p>
<br>

<h3 id="配置-Composer"><a href="#配置-Composer" class="headerlink" title="配置 Composer"></a>配置 Composer</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#Composer 依赖 php-cli，该应用已经在搭建 LNMP 环境的时候安装了</span>
yum -y update
<span class="token builtin class-name">cd</span> /tmp
<span class="token function">curl</span> -sS https://getcomposer.org/installer <span class="token operator">|</span> php

<span class="token comment">#在执行第三步之前，我们先换源，这里使用阿里源</span>
<span class="token function">composer</span> config -g repo.packagist <span class="token function">composer</span> https://mirrors.aliyun.com/composer/

<span class="token comment">#让 composer 全局可用</span>
<span class="token function">mv</span> composer.phar /usr/local/bin/composer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<br>

<h3 id="安装-redis"><a href="#安装-redis" class="headerlink" title="安装 redis"></a>安装 redis</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#安装 redis 依次执行以下命令</span>
yum <span class="token function">install</span> epel-release
yum <span class="token function">install</span> redis -y
systemctl start redis.service
systemctl <span class="token builtin class-name">enable</span> redis

<span class="token comment">#查看运行状态</span>
systemctl status redis.service

<span class="token comment">#测试 redis</span>
redis-cli <span class="token function">ping</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<br>

<h3 id="配置-laravel"><a href="#配置-laravel" class="headerlink" title="配置 laravel"></a>配置 laravel</h3><p>接下来就是比较麻烦的一个地方了，因为 php 默认禁止了一堆函数，所以在部署的使用我们可能需要开启一些。这里我们根据报错，一边看一边添加对应的配置</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#如果觉得 clone 下来的文件名太长，可以使用 mv 进行更改</span>
<span class="token comment">#首先我们先进入我们的项目文件夹，你们可能还需要一个 fileinfo 的配置并开启 putenv()、proc_open</span>
<span class="token function">composer</span> <span class="token function">install</span>

<span class="token comment">#在安装失败之后，我们使用更新命令</span>
<span class="token function">composer</span> update<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://gitee.com/chen-xinyang666/pictures/raw/master/202112111124200.png" alt="可知，我们缺少 putenv() 函数"></p>
<p><img src="https://gitee.com/chen-xinyang666/pictures/raw/master/202112111129099.png" alt="缺少 fileinfo"><br><img src="https://gitee.com/chen-xinyang666/pictures/raw/master/202112111131404.png" alt="缺少 proc_open()"></p>
<p>P.S. 分享一个小笑话，之前在部署中，遇到了 undefined name 的错误。在 StackOverFlow 上查询还以为是版本的问题，结果对 Composer 进行换源之后，再执行 composer update 就可以了</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#复制 .env.example 为 .env</span>
<span class="token function">cp</span> .env.example .env

<span class="token comment">#生成 APP_KEY</span>
php artisan key:generate

<span class="token comment">#打开.env 进行配置</span>
<span class="token function">vi</span> ./.env

<span class="token comment">#需更改的配置如下，依照备注进行修改</span>
<span class="token assign-left variable">APP_NAME</span><span class="token operator">=</span>你的APP名字
<span class="token assign-left variable">APP_ENV</span><span class="token operator">=</span>production <span class="token comment"># 这里设为生成环境</span>
<span class="token assign-left variable">APP_KEY</span><span class="token operator">=</span>base64:前面生成的key不用改
<span class="token assign-left variable">APP_DEBUG</span><span class="token operator">=</span>false <span class="token comment"># 关闭调试模式</span>
<span class="token assign-left variable">APP_URL</span><span class="token operator">=</span>你的主机地址
<span class="token assign-left variable">LOG_CHANNEL</span><span class="token operator">=</span>stack
<span class="token assign-left variable">DB_CONNECTION</span><span class="token operator">=</span>mysql
<span class="token assign-left variable">DB_HOST</span><span class="token operator">=</span><span class="token number">127.0</span>.0.1
<span class="token assign-left variable">DB_PORT</span><span class="token operator">=</span><span class="token number">3306</span>
<span class="token assign-left variable">DB_DATABASE</span><span class="token operator">=</span>larabbs
<span class="token assign-left variable">DB_USERNAME</span><span class="token operator">=</span>root
<span class="token assign-left variable">DB_PASSWORD</span><span class="token operator">=</span>你的数据库密码
<span class="token assign-left variable">BROADCAST_DRIVER</span><span class="token operator">=</span>log
<span class="token assign-left variable">CACHE_DRIVER</span><span class="token operator">=</span>redis  <span class="token comment"># 这里使用redis</span>
<span class="token assign-left variable">SESSION_DRIVER</span><span class="token operator">=</span>file
<span class="token assign-left variable">SESSION_LIFETIME</span><span class="token operator">=</span><span class="token number">120</span>
<span class="token assign-left variable">QUEUE_DRIVER</span><span class="token operator">=</span>redis <span class="token comment"># 这里使用redis</span>
<span class="token builtin class-name">.</span>
<span class="token builtin class-name">.</span>
<span class="token builtin class-name">.</span>
<span class="token assign-left variable">MAIL_DRIVER</span><span class="token operator">=</span>smtp
<span class="token assign-left variable">MAIL_HOST</span><span class="token operator">=</span>smtp.qq.com
<span class="token assign-left variable">MAIL_PORT</span><span class="token operator">=</span><span class="token number">25</span>
<span class="token assign-left variable">MAIL_USERNAME</span><span class="token operator">=</span>你的QQ邮箱
<span class="token assign-left variable">MAIL_PASSWORD</span><span class="token operator">=</span>你的smtp服务的密码
<span class="token assign-left variable">MAIL_ENCRYPTION</span><span class="token operator">=</span>tls
<span class="token assign-left variable">MAIL_FROM_ADDRESS</span><span class="token operator">=</span>你的邮箱地址
<span class="token assign-left variable">MAIL_FROM_NAME</span><span class="token operator">=</span>LaraBBS
<span class="token builtin class-name">.</span>
<span class="token builtin class-name">.</span>
<span class="token builtin class-name">.</span>
<span class="token assign-left variable">BAIDU_TRANSLATE_APPID</span><span class="token operator">=</span>你的百度翻译APPID
<span class="token assign-left variable">BAIDU_TRANSLATE_KEY</span><span class="token operator">=</span>你的百度翻译KEY

<span class="token comment">#将数据库进行迁移</span>
php artisan migrate

<span class="token comment">#运行 passport:install 命令来创建生成安全访问令牌时所需的加密密钥，同时，这条命令也会创建用于生成访问令牌的「个人访问」客户端和「密码授权」客户端</span>
php artisan passport:install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<br>

<h3 id="配置-nginx"><a href="#配置-nginx" class="headerlink" title="配置 nginx"></a>配置 nginx</h3><p>在 /www/server/nginx/conf 中配置 nginx 的配置文件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">server <span class="token punctuation">{</span>
    listen <span class="token number">80</span><span class="token punctuation">;</span>
    server_name localhost<span class="token punctuation">;</span>
    root /home/laravel/sast<span class="token punctuation">;</span>

    add_header X-Frame-Options <span class="token string">"SAMEORIGIN"</span><span class="token punctuation">;</span>
    add_header X-XSS-Protection <span class="token string">"1; mode=block"</span><span class="token punctuation">;</span>
    add_header X-Content-Type-Options <span class="token string">"nosniff"</span><span class="token punctuation">;</span>

    index index.php index.html index.htm<span class="token punctuation">;</span>

    charset utf-8<span class="token punctuation">;</span>

    location / <span class="token punctuation">{</span>
        try_files <span class="token variable">$uri</span> <span class="token variable">$uri</span>/ /index.php?<span class="token variable">$query_string</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    location <span class="token operator">=</span> /favicon.ico <span class="token punctuation">{</span> access_log off<span class="token punctuation">;</span> log_not_found off<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    location <span class="token operator">=</span> /robots.txt  <span class="token punctuation">{</span> access_log off<span class="token punctuation">;</span> log_not_found off<span class="token punctuation">;</span> <span class="token punctuation">}</span>

    error_page <span class="token number">404</span> /index.php<span class="token punctuation">;</span>

    location ~ <span class="token punctuation">\</span>.php$ <span class="token punctuation">{</span>
        root /home/laravel/sast<span class="token punctuation">;</span>
        fastcgi_split_path_info ^<span class="token punctuation">(</span>.+<span class="token punctuation">\</span>.php<span class="token punctuation">)</span><span class="token punctuation">(</span>/.+<span class="token punctuation">)</span>$<span class="token punctuation">;</span>
        fastcgi_pass <span class="token number">127.0</span>.0.1:9000<span class="token punctuation">;</span>
        fastcgi_index index.php<span class="token punctuation">;</span>
        fastcgi_param  SCRIPT_FILENAME  <span class="token variable">$document_root</span><span class="token variable">$fastcgi_script_name</span><span class="token punctuation">;</span>
        include fastcgi_params<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    location ~ /<span class="token punctuation">\</span>.<span class="token punctuation">(</span>?<span class="token operator">!</span>well-known<span class="token punctuation">)</span>.* <span class="token punctuation">{</span>
        deny all<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<br>

<h3 id="Crontab-配置"><a href="#Crontab-配置" class="headerlink" title="Crontab 配置"></a>Crontab 配置</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#对 crontab 进行配置</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">EDITOR</span><span class="token operator">=</span>vi <span class="token operator">&amp;&amp;</span> <span class="token function">crontab</span> -e

* * * * * php /home/vagrant/Code/larabbs/artisan schedule:run <span class="token operator">&gt;&gt;</span> /dev/null <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<br>

<h3 id="启动-laravel"><a href="#启动-laravel" class="headerlink" title="启动 laravel"></a>启动 laravel</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">php artisan serve --port <span class="token number">8080</span> --host <span class="token number">0.0</span>.0.0
<span class="token comment">#--host 防止 ip 无法被访问</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<br>

<h2 id="番外"><a href="#番外" class="headerlink" title="番外"></a>番外</h2><br>

<h3 id="Github与原仓库同步"><a href="#Github与原仓库同步" class="headerlink" title="Github与原仓库同步"></a>Github与原仓库同步</h3><p>实在是……有太多人同时在帮忙修订错别字或优化 xiaolai 的 <code>the-craft-of-selfteaching</code> 了。如果你提交的 pull request 未被接受且得到回复说：“重新fork”，其实是你遇到一个问题：</p>
<blockquote>
<ul>
<li>在你 fork 之后， xiaolai 的仓库又更新了</li>
<li>但 github 不会自动帮你把 xiaolai 的仓库 同步给你 fork 后的仓库</li>
<li>导致你提交 pull request 时的版本和 xiaolai 的版本不一致</li>
</ul>
</blockquote>
<p>这个问题，用显得更“专业点”的说法，叫做：<code>Github进行fork后如何与原仓库同步</code>。那到底怎么做呢</p>
<p>最省事的办法可能是</p>
<blockquote>
<ul>
<li>在你fork的仓库setting页翻到最下方，然后delete这个仓库</li>
<li>然后重新fork xiaolai 的仓库，并 git clone 到你的本地</li>
</ul>
</blockquote>
<p>有时候，你需要用到这个省事的办法，比如 xiaolai 的仓库再次整理了 commit 。但在更多情况下，删掉自己fork的库，应该是你的最后选择，而不应该是首选</p>
<p>和很多人一起向 xiaolai 提交 pull request，这实在是一个反复练习 <code>merge</code> （中文说法：合并，或版本合并）的机会。毫不夸张地讲，版本管理是软件工程极其重要的规范，也是极其基础的必备技能。而 <code>merge</code> 则是版本管理中最必须也最常用的场景</p>
<p>那要不然，就多练练？以下是傻瓜版操作步骤，还细心配了截图，保管你从 0 也能上手。至于原理嘛，慢慢再搞懂吧</p>
<br>

<h4 id="merge前的设定"><a href="#merge前的设定" class="headerlink" title="merge前的设定"></a>merge前的设定</h4><p>step 1、进入到本地仓库的目录</p>
<p>下面所有操作，如无特别说明，都是在你的本地仓库的目录下操作。比如我的本地仓库为<code>/from-liujuanjuan-the-craft-of-selfteaching</code></p>
<p><a href="https://user-images.githubusercontent.com/31027645/54422899-6938e880-474a-11e9-8768-27ac24673e28.png"><img src="https://gitee.com/chen-xinyang666/pictures/raw/master/202112181629383.png" alt="进入本地仓库"></a></p>
<p>step 2、执行命令 <code>git remote -v</code> 查看你的远程仓库的路径：</p>
<p><a href="https://user-images.githubusercontent.com/31027645/54422975-95ed0000-474a-11e9-96bf-1018d6bc06f2.png"><img src="https://user-images.githubusercontent.com/31027645/54422975-95ed0000-474a-11e9-96bf-1018d6bc06f2.png" alt="查看upstream是否连接远程仓库"></a></p>
<p>如果只有上面2行，说明你未设置 <code>upstream</code> （中文叫：上游代码库）。一般情况下，设置好一次 <code>upstream</code> 后就无需重复设置</p>
<p>step 3、执行命令 <code>git remote add upstream https://github.com/selfteaching/the-craft-of-selfteaching.git</code> 把 xiaolai 的仓库设置为你的 <code>upstream</code> 。这个命令执行后，没有任何返回信息；所以再次执行命令 <code>git remote -v</code> 检查是否成功</p>
<p><a href="https://user-images.githubusercontent.com/31027645/54423107-d8aed800-474a-11e9-9ab8-7bb901181283.png"><img src="https://user-images.githubusercontent.com/31027645/54423107-d8aed800-474a-11e9-9ab8-7bb901181283.png" alt="检验操作是否成功"></a></p>
<p>step 4、执行命令 <code>git status</code> 检查本地是否有未提交的修改。如果有，则把你本地的有效修改，先从本地仓库推送到你的github仓库。最后再执行一次 <code>git status</code> 检查本地已无未提交的修改。</p>
<p><code>git add -A</code> 或者 <code>git add filename</code><br><code>git commit -m "your note"</code><br><code>git push origin master</code><br><code>git status</code></p>
<p>注1：这一步作为新手，建议严格执行，是为了避免大量无效修改或文本冲突带来的更复杂局面</p>
<p>注2：如果你已经在fork后的仓库提交了大量对 xiaolai 的仓库并没有价值的修改，那么想要pull request，还是重新回到本文最初的“最省事办法”吧</p>
<br>

<h4 id="merge-的关键命令"><a href="#merge-的关键命令" class="headerlink" title="merge 的关键命令"></a>merge 的关键命令</h4><p>以下操作紧接着上面的步骤。</p>
<p>step 5、执行命令 <code>git fetch upstream</code> 抓取 xiaolai 原仓库的更新：</p>
<p><a href="https://user-images.githubusercontent.com/31027645/54448734-60b2d300-4787-11e9-9fdf-90fcc2e66052.png"><img src="https://user-images.githubusercontent.com/31027645/54448734-60b2d300-4787-11e9-9fdf-90fcc2e66052.png" alt="抓取原仓库更新的内容"></a></p>
<p>step 6、执行命令 <code>git checkout master</code> 切换到 master 分支：</p>
<p><a href="https://user-images.githubusercontent.com/31027645/54448759-6dcfc200-4787-11e9-8bbc-a5beef23ea88.png"><img src="https://user-images.githubusercontent.com/31027645/54448759-6dcfc200-4787-11e9-8bbc-a5beef23ea88.png" alt="切换到你自己的分支"></a></p>
<p>step 7、执行命令 <code>git merge upstream/master</code> 合并远程的master分支：</p>
<p><a href="https://user-images.githubusercontent.com/31027645/54449526-47128b00-4789-11e9-9add-09217eb91a68.png"><img src="https://user-images.githubusercontent.com/31027645/54449526-47128b00-4789-11e9-9add-09217eb91a68.png" alt="合并操作"></a></p>
<p>step 8、执行命令 <code>git push </code>把本地仓库向github仓库（你fork到自己名下的仓库）推送修改</p>
<p>如果担心自己不小心改了哪里，可以再次执行命令 <code>git status</code> 检查哪些文件有变化。这个操作仅是检查，不会改变任何状态，放心用</p>
<p><a href="https://user-images.githubusercontent.com/31027645/54449665-a07aba00-4789-11e9-9181-bdcc814fffe6.png"><img src="https://gitee.com/chen-xinyang666/pictures/raw/master/202112181629113.png" alt="最后检测一次"></a></p>
<p>现在你已经解决了fork的仓库和原仓库版本不一致的问题。可以放心向 xiaolai 发起 pull request 了。如果以上操作你花了不少时间，而 xiaolai 的仓库 又恰好更新了。很好，一次新的练习机会来了……</p>
<br>

<h3 id="解决报错500-Server-Error："><a href="#解决报错500-Server-Error：" class="headerlink" title="解决报错500 Server Error："></a>解决报错500 Server Error：</h3><p>.env.example将其复制一份重命名为env</p>
<p>1.打开配置文件 laravel/config/app.php</p>
<p>2.找到 ‘debug’项 设置为 true</p>
<p>3.刷新网页 抛出运行异常：No application encryption key has been specified.(未指定应用加密密钥)</p>
<p>4.在laravel下找到 .env.example，将其复制一份重命名为 “.env”</p>
<p>5.在laravel下执行命令：php artisan key:generate，后刷新页面（如果无法执行该命令，可以直接在报错页面一键生成key）</p>
<br>

<h3 id="中间件对输入的数据进行检验"><a href="#中间件对输入的数据进行检验" class="headerlink" title="中间件对输入的数据进行检验"></a>中间件对输入的数据进行检验</h3><p>主要是为了记录自己做锅的一些代码，也算对laravel基本知识的复刻</p>
<br>

<h4 id="路由的编写"><a href="#路由的编写" class="headerlink" title="路由的编写"></a>路由的编写</h4><p>这次的路由是指定在api.php中写一个指向控制器的路由，一般我们都是写在web.php上</p>
<p>这两者的区别，就是api.php需要在跳转的时候添加一个api前缀</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">middleware</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'work.feng'</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/work'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token class-name static-context">WorkController</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'GodWu'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//学长的例子</span>

<span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">middleware</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'check.cxy'</span><span class="token punctuation">)</span><span class="token comment">//给中间件的定义</span>
<span class="token operator">-&gt;</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/user/{username?}/{password?}'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token class-name static-context">WorkController</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'check'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'[0-9]+'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'username'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'[a-z]+'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使用正则规定输入的值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<br>

<h4 id="中间件的使用"><a href="#中间件的使用" class="headerlink" title="中间件的使用"></a>中间件的使用</h4><p>可以使用artisan命令创建一个中间件，系统会帮你设置好要使用的接口</p>
<p>但是先不要着急，你现在需要在kernel.php中定义中间件的名称，并规定对应位置</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">protected</span> <span class="token variable">$routeMiddleware</span> <span class="token operator">=</span> <span class="token punctuation">[</span>

<span class="token string single-quoted-string">'work.feng'</span> <span class="token operator">=&gt;</span> <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\</span>App<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Middleware<span class="token punctuation">\</span>Work<span class="token punctuation">\</span>work</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
<span class="token string single-quoted-string">'check.cxy'</span> <span class="token operator">=&gt;</span> <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\</span>App<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Middleware<span class="token punctuation">\</span>Work<span class="token punctuation">\</span>check</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token comment">//将对应名称指向中间件</span>

<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> check<span class="token punctuation">{</span>

    <span class="token comment">/**
     * 判断传入的类型是否是post
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \Closure  $next
     * @return mixed
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Request</span> <span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token class-name type-declaration">Closure</span> <span class="token variable">$next</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	
        <span class="token comment">//将输入的数据传入到指定的变量中，以便判断使用</span>
        <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$request</span><span class="token operator">-&gt;</span><span class="token property">username</span><span class="token punctuation">;</span>
        <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$request</span><span class="token operator">-&gt;</span><span class="token property">password</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token operator">-&gt;</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'GET'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

            <span class="token function">abort</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'not support for GET'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//报错函数，可以设置报错信息</span>

        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>

            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$username</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

                 <span class="token keyword">return</span> <span class="token function">response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token comment">//设置返回json数据的信息</span>

                <span class="token string single-quoted-string">'ret'</span>  <span class="token operator">=&gt;</span> <span class="token number">200</span><span class="token punctuation">,</span>
                <span class="token string single-quoted-string">'desc'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'success!'</span><span class="token punctuation">,</span>
                <span class="token string single-quoted-string">'data'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'a good saster'</span>

                <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>

                <span class="token function">abort</span><span class="token punctuation">(</span><span class="token number">403</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'the message was not complete'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token punctuation">}</span>

        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token variable">$next</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<br>

<h3 id="postman测试"><a href="#postman测试" class="headerlink" title="postman测试"></a>postman测试</h3><p>可以模拟前端页面，对传入的数据进行分析返回对应的前端页面和json数据</p>
<p>（在前端制作天气demo的时候使用过，不过当时的天气api太拉了）</p>
<p>最后成功显示</p>
<p>对应的403，404&amp;json格式，完成这个锅（好耶）</p>
<br>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring-Boot</tag>
        <tag>php</tag>
        <tag>laravel</tag>
      </tags>
  </entry>
</search>
